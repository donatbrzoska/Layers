#include "../ShaderBase/shader_base.hlsl"

#include "../rakel.hlsl"
#include "../math.hlsl"
#include "../floating_avg.hlsl"

float3 Position;
int AutoZEnabled;
int ZZero;
float Pressure;
float Rotation;
float Tilt;
float MAX_SUPPORTED_TILT;
float BaseSink_MAX;
float LayerSink_MAX_Ratio;
float TiltSink_MAX;

int FinalUpdateForStroke;
RWStructuredBuffer<float> PositionZAvgRingbuffer;
int StrokeBegin;

RWStructuredBuffer<Rakel> RakelInfo;


#pragma kernel main

[numthreads(32,1,1)]
void main (uint3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        Rakel rakel = RakelInfo[0];
        rakel.pressure = Pressure;
        rakel.rotation = Rotation;
        rakel.tilt = Tilt;

        if (AutoZEnabled == 0)
        {
            // would need to determine actual layer thickness but disabled auto z is primarily used for exact
            // debugging, so we just skip the precision on this
            rakel.actual_layer_thickness = 0;
            // TODO include canvas position -> this would also require info about the direction the canvas is oriented
            rakel.position_base_z = Position.z;
        }

        if (ZZero == 1)
        {
            rakel.position.z = 0;
        }
        else
        {
            float layer_sink_max = rakel.actual_layer_thickness * LayerSink_MAX_Ratio;
            float tilt_sink_max = pow(abs(rakel.tilt / MAX_SUPPORTED_TILT), (float)1/3) * TiltSink_MAX;
            // only apply (part of) base_sink, when layer_sink_max is smaller
            float adjusted_base_sink_max = max(BaseSink_MAX - layer_sink_max, 0);
            float sink = adjusted_base_sink_max + layer_sink_max + tilt_sink_max;

            // NOTE: This assumes that canvas is always faced to negative z direction
            rakel.position.z = rakel.position_base_z + rakel.pressure * sink;
            // prevent sink through canvas
            // TODO include canvas position -> this would also require info about the direction the canvas is oriented
            // TODO include anchor ratio, right now this only works for anchors located on rakel edge
            rakel.position.z = min(rakel.position.z, 0);

            if (FinalUpdateForStroke == 1)
            {
                rakel.position.z = floating_avg(PositionZAvgRingbuffer, StrokeBegin, rakel.position.z);
            }

            rakel.position = float3(Position.x, Position.y, rakel.position.z);
        }

        float3 ul_origin = float3(0, rakel.length, 0);
        float3 ur_origin = float3(rakel.width, rakel.length, 0);
        float3 ll_origin = float3(0, 0, 0);
        float3 lr_origin = float3(rakel.width, 0, 0);

        rakel.ul_tilted = rotate_by_y(ul_origin, rakel.tilt, rakel.anchor); // tilt around anchor
        rakel.ur_tilted = rotate_by_y(ur_origin, rakel.tilt, rakel.anchor); // tilt around anchor
        rakel.ll_tilted = rotate_by_y(ll_origin, rakel.tilt, rakel.anchor); // tilt around anchor
        rakel.lr_tilted = rotate_by_y(lr_origin, rakel.tilt, rakel.anchor); // tilt around anchor

        float3 ul_rotated = rotate_by_z(rakel.ul_tilted, rakel.rotation, rakel.anchor); // rotate around anchor
        float3 ur_rotated = rotate_by_z(rakel.ur_tilted, rakel.rotation, rakel.anchor); // rotate around anchor
        float3 ll_rotated = rotate_by_z(rakel.ll_tilted, rakel.rotation, rakel.anchor); // rotate around anchor
        float3 lr_rotated = rotate_by_z(rakel.lr_tilted, rakel.rotation, rakel.anchor); // rotate around anchor

        float3 position_translation = rakel.position - rakel.anchor;
        rakel.upper_left = ul_rotated + position_translation;
        rakel.upper_right = ur_rotated + position_translation;
        rakel.lower_left = ll_rotated + position_translation;
        rakel.lower_right = lr_rotated + position_translation;

        rakel.edge_z = rakel.lower_left.z;

        RakelInfo[0] = rakel;
    }
}