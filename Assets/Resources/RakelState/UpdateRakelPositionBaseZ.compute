#include "../ShaderBase/shader_base.hlsl"

#include "../Paint/paint.hlsl"
#include "../rakel.hlsl"
#include "../paint_grid.hlsl"

RWStructuredBuffer<float> ReducedCanvasVolumeSource;
RWStructuredBuffer<float> ReducedRakelVolumeSource;

float LayerThickness_MAX;
uint TiltAdjustLayerThickness;
float MAX_SUPPORTED_TILT;

RWStructuredBuffer<Rakel> RakelInfo;


#pragma kernel main

[numthreads(32,1,1)]
void main (uint3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        Rakel rakel = RakelInfo[0];

        float canvas_volume_thickness = ReducedCanvasVolumeSource[0] * VOLUME_THICKNESS();

        float rakel_volume_thickness = ReducedRakelVolumeSource[0] * VOLUME_THICKNESS();
        float layer_thickness = min(rakel_volume_thickness, LayerThickness_MAX);

        if (TiltAdjustLayerThickness == 1)
        {
            // Prevent full emit, when we have a lot of tilt. Usually this would not be
            // such a problem, but currently reservoirs are not modeled exactly and always
            // hang down vertically - therefore when filled, we have undesirably big values
            // for rakel_volume_thickness.
            layer_thickness = layer_thickness - layer_thickness * rakel.tilt / MAX_SUPPORTED_TILT;
        }

        rakel.actual_layer_thickness = layer_thickness;
        rakel.position_base_z = - (canvas_volume_thickness + layer_thickness);
        
        RakelInfo[0] = rakel;
    }
}