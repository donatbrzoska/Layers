#include "../ShaderBase/shader_base.hlsl"

#include "../Paint/paint.hlsl"
#include "../paint_grid.hlsl"

RWStructuredBuffer<float> ReducedVolumeSource;

RWStructuredBuffer<float> AvgRingbuffer;
uint StrokeBegin;

#pragma kernel main

[numthreads(32,1,1)]
void main (uint3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        float new_value = ReducedVolumeSource[0];

        uint OFFSET = 3; // actual buffer starts at index 3

        if (StrokeBegin == 1)
        {
            float current_avg = new_value;
            uint pointer = 0;
            uint size = (uint)AvgRingbuffer[2];

            AvgRingbuffer[0] = current_avg;
            AvgRingbuffer[1] = (float)pointer;
            // init buffer with all same values
            for (uint i=0; i<size; i++)
            {
                AvgRingbuffer[OFFSET+i] = current_avg;
            }
        }
        else
        {
            float current_avg = AvgRingbuffer[0];
            uint pointer = (uint)AvgRingbuffer[1];
            uint size = (uint)AvgRingbuffer[2];

            float removed = AvgRingbuffer[OFFSET+pointer];
            float new_avg = current_avg - removed/(float)size + new_value/(float)size;

            AvgRingbuffer[0] = new_avg;
            AvgRingbuffer[1] = (float)((pointer+1) % size);
            AvgRingbuffer[OFFSET+pointer] = new_value;

            ReducedVolumeSource[0] = new_avg;
        }
    }
}