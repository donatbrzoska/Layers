// ######################################## SHADER BASE ########################################

#include "basic_util.hlsl"
#include "indexing.hlsl"
#include "logging.hlsl"

uint3 id__;
uint2 SubgridGroupSize;
uint2 SubgridCurrentThreadID;

uint2 id()
{
    uint2 subgrid_id = uint2(id__.x, id__.y);
    return subgrid_id * SubgridGroupSize + SubgridCurrentThreadID;
}

int2 CalculationPosition;
uint2 CalculationSize;

RWStructuredBuffer<float4> Debug;
RWStructuredBuffer<DebugListInfo> DebugInfo;

void set_debug_list_info(uint size, uint t)
{
    DebugListInfo dli;
    dli.Size = size;
    dli.Type = t;
    DebugInfo[0] = dli;
}

void log_(uint index, float4 f)
{
    Debug[XYZ(id().x, id().y, index, CalculationSize)] = f;
}

// ###################################### SHADER BASE END ######################################

#include "convert.hlsl"


int2 Pixel;
uint TextureResolution;
float3 SurfacePosition;
float2 SurfaceSize;

#pragma kernel test_pixel_to_world_space

[numthreads(32,1,1)]
void test_pixel_to_world_space(uint3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        float3 pixel_to_world_space_result = pixel_to_world_space(Pixel, TextureResolution, SurfacePosition, SurfaceSize);
        log_float3(pixel_to_world_space_result);
    }
}


float3 WorldSpacePosition;
// uint TextureResolution;

#pragma kernel test_rakel_anchor_to_index_space

[numthreads(32,1,1)]
void test_rakel_anchor_to_index_space(uint3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        float2 test_rakel_anchor_to_index_space_result = rakel_anchor_to_index_space(WorldSpacePosition, TextureResolution);
        log_float2(test_rakel_anchor_to_index_space_result);
    }
}