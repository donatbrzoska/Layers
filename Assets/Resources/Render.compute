#include "ShaderBase/shader_base.hlsl"

#include "Paint/paint.hlsl"
#include "paint_grid.hlsl"

RWStructuredBuffer<ColumnInfo> CanvasReservoirInfo;
RWStructuredBuffer<Paint> CanvasReservoirContent;
int3 CanvasReservoirSize;
int ColorSpace;

RWTexture2D<float4> NormalMap;
float NormalScale;
RWTexture2D<float4> Texture;


float4 CANVAS_COLOR(int color_space)
{
    float4 rgb_color = float4(1,1,1,1);
    return (color_space == 0) ? rgb_color : rgb_to_ryb(rgb_color);
}

void update_normal(int2 canvas_pixel)
{
    // calculate normal
    // ... ... deal with oob access
    int left = clamp(canvas_pixel.x-1, 0, CanvasReservoirSize.x-1);
    int right = clamp(canvas_pixel.x+1, 0, CanvasReservoirSize.x-1);
    int up = clamp(canvas_pixel.y+1, 0, CanvasReservoirSize.y-1);
    int bot = clamp(canvas_pixel.y-1, 0, CanvasReservoirSize.y-1);
    
    // ... ... get volumes
    float vol_ul = CanvasReservoirInfo[XY(left,           up,             CanvasReservoirSize.x)].volume;
    float vol_u =  CanvasReservoirInfo[XY(canvas_pixel.x, up,             CanvasReservoirSize.x)].volume;
    float vol_ur = CanvasReservoirInfo[XY(right,          up,             CanvasReservoirSize.x)].volume;
    float vol_l =  CanvasReservoirInfo[XY(left,           canvas_pixel.y, CanvasReservoirSize.x)].volume;
    float vol_m =  CanvasReservoirInfo[XY(canvas_pixel.x, canvas_pixel.y, CanvasReservoirSize.x)].volume;
    float vol_r =  CanvasReservoirInfo[XY(right,          canvas_pixel.y, CanvasReservoirSize.x)].volume;
    float vol_ll = CanvasReservoirInfo[XY(left,           bot,            CanvasReservoirSize.x)].volume;
    float vol_b =  CanvasReservoirInfo[XY(canvas_pixel.x, bot,            CanvasReservoirSize.x)].volume;
    float vol_lr = CanvasReservoirInfo[XY(right,          bot,            CanvasReservoirSize.x)].volume;

    // ... ... sobel calculation
    float normal_x = -1 * vol_ul            + 1 * vol_ur
                + -2 * vol_l             + 2 * vol_r
                + -1 * vol_ll            + 1 * vol_lr;

    float normal_y = -1 * vol_ul + -2 * vol_u + -1 * vol_ur

                +  1 * vol_ll +  2 * vol_b +  1 * vol_lr;

    float normal_z = 1;

    // ... ... scaling and normal assembly
    float scale = NormalScale;
    
    float4 normal = float4(scale * (float)(-normal_x), scale * (float)(normal_y), normal_z, 1);
    float4 normalized = normalize(normal);
    float4 halfed = (normalized + float4(1, 1, 1, 1)) / 2;
    halfed.w = 1;

    NormalMap[canvas_pixel] = halfed;
}

void update_color(int2 canvas_pixel)
{
    // default
    float4 background_color = CANVAS_COLOR(ColorSpace);
    Paint top = paint_create_empty();
    
    // paint from canvas
    int top_z = CanvasReservoirInfo[XY(canvas_pixel.x, canvas_pixel.y, CanvasReservoirSize.x)].size - 1;
    if (top_z > -1) { // there is at least one layer of paint
        top = paint_grid_get(CanvasReservoirInfo, CanvasReservoirContent, CanvasReservoirSize, int3(canvas_pixel.x, canvas_pixel.y, top_z));
    }
    if (top_z > 0) { // there is at least two layers of paint
        background_color = paint_grid_get(CanvasReservoirInfo, CanvasReservoirContent, CanvasReservoirSize, int3(canvas_pixel.x, canvas_pixel.y, top_z - 1)).color;
    }

    // blend little paint with background color
    // we can't use alpha values, because there is nothing behind the paint - the paint is the texture
    if (top.volume < PAINT_UNIT()) {
        top = alpha_blend(top, background_color);
    }

    // float3 result = ryb_to_rgb(float3(1, 1, 0));
    // p.color = float4(result.x, result.y, result.z, 1);

    // set color
    Texture[canvas_pixel] = (ColorSpace == 1) ? ryb_to_rgb(top.color) : top.color;
}

#pragma kernel main

[numthreads(32,1,1)]
void main (int3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        // calculate pixel position on canvas
        int2 canvas_pixel = id() + CalculationPosition;
        if (pixel_in_array_range(canvas_pixel, CanvasReservoirSize.xy))
        {
            update_normal(canvas_pixel);
            update_color(canvas_pixel);
        }
    }
}