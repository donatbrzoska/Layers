#pragma kernel main

// RWStructuredBuffer<float3> Debug;

uint2 CalculationSize;

int2 CalculationPosition;

struct Paint {
    float4 color;
    int volume;
};
RWStructuredBuffer<Paint> Canvas;
uint2 CanvasSize; // == TextureWidth

RWTexture2D<float4> NormalMap;


// RWStructuredBuffer<int> Finished;


bool is_relevant_thread(uint3 id)
{
    return all(id.xy < CalculationSize);
}

bool pixel_in_canvas_range(int2 pixel)
{
    return pixel.x >= 0
        && pixel.x < (int)CanvasSize.x
        && pixel.y >= 0
        && pixel.y < (int)CanvasSize.y;
}

uint XY(uint x, uint y, uint width)
{
    return y * width + x;
}

[numthreads(1,8,1)]
void main (uint3 id : SV_DispatchThreadID)
{
    // Filter #1
    if (is_relevant_thread(id))
    {
        // calculate pixel position on canvas
        int2 canvas_pixel = id.xy + CalculationPosition;
        if (pixel_in_canvas_range(canvas_pixel))
        {

            // calculate normal
            // ... ... deal with oob access
            uint left = clamp(canvas_pixel.x-1, 0, CanvasSize.x-1);
            uint right = clamp(canvas_pixel.x+1, 0, CanvasSize.x-1);
            uint up = clamp(canvas_pixel.y+1, 0, CanvasSize.y-1);
            uint bot = clamp(canvas_pixel.y-1, 0, CanvasSize.y-1);
            
            // ... ... get volumes
            uint vol_ul = Canvas[XY(left,           up,             CanvasSize.x)].volume;
            uint vol_u =  Canvas[XY(canvas_pixel.x, up,             CanvasSize.x)].volume;
            uint vol_ur = Canvas[XY(right,          up,             CanvasSize.x)].volume;
            uint vol_l =  Canvas[XY(left,           canvas_pixel.y, CanvasSize.x)].volume;
            // uint vol_m =  Canvas[XY(canvas_pixel.x, canvas_pixel.y, CanvasSize.x)].volume;
            uint vol_r =  Canvas[XY(right,          canvas_pixel.y, CanvasSize.x)].volume;
            uint vol_ll = Canvas[XY(left,           bot,            CanvasSize.x)].volume;
            uint vol_b =  Canvas[XY(canvas_pixel.x, bot,            CanvasSize.x)].volume;
            uint vol_lr = Canvas[XY(right,          bot,            CanvasSize.x)].volume;

            // ... ... sobel calculation
            int normal_x = -1 * vol_ul            + 1 * vol_ur
                        + -2 * vol_l             + 2 * vol_r
                        + -1 * vol_ll            + 1 * vol_lr;

            int normal_y = -1 * vol_ul + -2 * vol_u + -1 * vol_ur

                        +  1 * vol_ll +  2 * vol_b +  1 * vol_lr;

            int normal_z = 1;

            // ... ... scaling and normal assembly
            float scale = 0.000008f;
            // float scale = 0.000002f;
            
            float4 normal = float4(scale * (float)normal_x, scale * (float)(-normal_y), normal_z, 1);
            float4 normalized = normalize(normal);
            float4 halfed = (normalized + float4(1, 1, 1, 1)) / 2;
            halfed.w = 1;

            NormalMap[canvas_pixel] = halfed;
        }
    }
    // if (id.x == 0 && id.y == 0)
    // {
    //     Finished[0] = 1;
    // }
}