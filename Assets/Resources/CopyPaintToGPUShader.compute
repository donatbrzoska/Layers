#pragma kernel main

// RWStructuredBuffer<float3> Debug;

uint2 CalculationSize;

struct Paint {
    float4 color;
    int volume;
};
RWStructuredBuffer<Paint> Source;

RWTexture3D<float4> ColorsTarget;
RWTexture3D<int> VolumesTarget;

bool is_relevant_thread(uint3 id)
{
    return id.x < CalculationSize.x && id.y < CalculationSize.y;
}

uint XY(uint x, uint y, uint width)
{
    return  y * width + x;
}

[numthreads(1,8,1)]
void main (uint3 id : SV_DispatchThreadID)
{
    if (is_relevant_thread(id))
    {
        // In this case CalculationSize == ReservoirSize
        uint3 target_pos = uint3(id.x, id.y, 0);
        Paint p = Source[XY(id.x, id.y, CalculationSize.x)];
        ColorsTarget[target_pos] = p.color;
        VolumesTarget[target_pos] = p.volume;

        // Debug[XY(id.x, id.y, CalculationSize.x)] = p.color;
    }
}
