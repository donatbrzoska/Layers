#include "../ShaderBase/shader_base.hlsl"

#include "../convert.hlsl"
#include "../volume.hlsl"
#include "../Paint/paint.hlsl"
#include "../math.hlsl"
#include "../sutherland_hodgman.hlsl"
#include "../rakel.hlsl"
#include "../mapped_info.hlsl"

uint TextureResolution;

RWStructuredBuffer<Rakel> RakelInfo;
RWStructuredBuffer<Paint> RakelReservoir;
RWStructuredBuffer<Paint> RakelReservoirDuplicate;
uint2 RakelReservoirSize;

float CanvasPositionZ;
RWStructuredBuffer<Paint> CanvasReservoirDuplicate;
uint2 CanvasReservoirSize;
RWStructuredBuffer<MappedInfo> RakelMappedInfo;

int ClipRadiusX;
float RakelTilt_MAX;
float EmitDistance_MAX;
float EmitVolume_MIN;
float EmitVolume_MAX;

RWStructuredBuffer<float> DistortionMap;
uint2 DistortionMapSize;
uint DistortionMapIndex;

RWStructuredBuffer<Paint> RakelEmittedPaint;


// radius of 1 does an emit on a 3x3 area from emit source grid, based on the rounded rakel_reservoir_pixel
void emit(float2 rakel_reservoir_pixel, int2 radius, float distance, int2 canvas_pixel)
{
    int2 rakel_reservoir_pixel_nearest = round(rakel_reservoir_pixel);

    // TODO For more detail, this (and the volume_to_emit value) could also
    //      be calculated based on the polygon overlap
    float volume_rakel = RakelReservoirDuplicate[XY(rakel_reservoir_pixel_nearest.x, rakel_reservoir_pixel_nearest.y, RakelReservoirSize.x)].volume;
    float volume_canvas = CanvasReservoirDuplicate[XY(canvas_pixel.x, canvas_pixel.y, CanvasReservoirSize.x)].volume;
    float paint_thickness_rakel = volume_rakel * VOLUME_THICKNESS();
    float paint_thickness_canvas = volume_canvas * VOLUME_THICKNESS();
    float surface_distance = distance - paint_thickness_rakel - paint_thickness_canvas;
    bool surfaces_touch = surface_distance <= 0;

    if (surfaces_touch)
    {
        Rakel rakel = RakelInfo[0];
        // float volume_to_emit = emit_volume(
        //     distance,
        //     EmitDistance_MAX,
        //     RakelTilt,
        //     RakelTilt_MAX,
        //     EmitVolume_MIN * PAINT_UNIT(),
        //     EmitVolume_MAX * PAINT_UNIT());

        // TODO adjust this, when implementing dried paint
        float rakel_edge_distance_from_canvas = abs(rakel.edge_z - CanvasPositionZ);
        float rakel_edge_distance_from_canvas_paint_surface = rakel_edge_distance_from_canvas - paint_thickness_canvas;
        float volume_fitting_between = max(rakel_edge_distance_from_canvas_paint_surface, 0) / VOLUME_THICKNESS();
        float volume_to_emit = volume_fitting_between + EmitVolume_MIN;

        //TODO there might be problems with rounding to negative indizes
        // VOLUME_TO_EMIT_TARGET_PU *= DistortionMap[XY(rakel_reservoir_pixel_nearest.x + DistortionMapIndex, rakel_reservoir_pixel_nearest.y, DistortionMapSize.x)];

        // Array size should really be [1+2*radius.y][1+2*radius.x] but we can't make dynamic arrays
        // in HLSL. So we do 9x9, which is enough for 79 degree tilt and more is not useful for emitting anyways.
        // Also, with 11x11 we would get the following warning:
        // Shader warning in 'EmitFromRakel': Program 'main', warning X4714: sum of temp registers and indexable temp registers times 32 threads exceeds the recommended total 16384.  Performance may be reduced at kernel main (on metal)
        float4 colors_to_emit[9][9];
        float volumes_to_emit[9][9];
        float4 result_color = float4(0,0,0,0);
        float result_volume = 0;
        int y, x; // declare loop variables here so the compiler won't complain about double declaration of y
        for (y=-radius.y; y<=radius.y; y++) {
            for (x=-radius.x; x<=radius.x; x++) {
                // initialize arrays
                uint i = y + radius.y;
                uint j = x + radius.x;
                volumes_to_emit[i][j] = 0;
                colors_to_emit[i][j] = float4(0,0,0,0);

                // calculate part
                int2 coord = rakel_reservoir_pixel_nearest + int2(x, y);
                if (pixel_in_array_range(coord, RakelReservoirSize)) { // Prevent out of bounds access to reservoir. Also, if it's not in range, this overlap part is not (and must not be!) used anyways.
                    float2 rakel_anchor_index_space = rakel_anchor_to_index_space(rakel.anchor, TextureResolution);
                    float2 rect_rakel_reservoir_pixel = rotate_by_y_2D(rakel_reservoir_pixel, rakel.tilt, rakel_anchor_index_space);
                    float2 rect_coord = rotate_by_y_2D(coord, rakel.tilt, rakel_anchor_index_space);
                    Rectangle fragment_rectangle = create_rectangle(rect_rakel_reservoir_pixel, -rakel.rotation, 0);
                    Rectangle reservoir_rectangle = create_rectangle(rect_coord, 0, rakel.tilt);
                    float overlap = calculate_exact_overlap(fragment_rectangle, reservoir_rectangle);

                    if (overlap > 0) {
                        // get paint
                        uint2 coord_ = uint2(coord.x, coord.y);
                        Paint available = RakelReservoirDuplicate[XY(coord_.x, coord_.y, RakelReservoirSize.x)];

                        // calculate volume
                        float target_volume = overlap * volume_to_emit;
                        float really_available_volume = overlap * available.volume;

                        volumes_to_emit[i][j] = min(target_volume, really_available_volume);
                        result_volume += volumes_to_emit[i][j];

                        colors_to_emit[i][j] = available.color;
                    }
                }
            }
        }

        // determine color based on emitted volumes
        // TODO use mix function
        for (y=-radius.y; y<=radius.y; y++) {
            for (x=-radius.x; x<=radius.x; x++) {
                int2 coord = rakel_reservoir_pixel_nearest + int2(x, y);
                if (pixel_in_array_range(coord, RakelReservoirSize)) {
                    uint i = y + radius.y;
                    uint j = x + radius.x;
                    float volume_part = volumes_to_emit[i][j] / unzero(result_volume);
                    result_color += volume_part * colors_to_emit[i][j];
                }
            }
        }

        Paint result_paint;
        result_paint.color = result_color;
        result_paint.volume = result_volume;

        // delete amount of taken volume from reservoir (z=0)
        float deleted = 0;
        for (y=-radius.y; y<=radius.y; y++) {
            for (x=-radius.x; x<=radius.x; x++) {
                int2 coord = rakel_reservoir_pixel_nearest + int2(x, y);
                if (pixel_in_array_range(coord, RakelReservoirSize)) {
                    uint i = y + radius.y;
                    uint j = x + radius.x;
                    float to_be_deleted = volumes_to_emit[i][j];

                    uint2 coord_ = uint2(coord.x, coord.y);
                    RakelReservoir[XY(coord_.x, coord_.y, RakelReservoirSize.x)].volume -= to_be_deleted;
                    deleted += to_be_deleted;
                }
            }
        }

        RakelEmittedPaint[XY(id().x, id().y, CalculationSize.x)] = result_paint;
        // log_float(deleted);
    }
}

#pragma kernel main

[numthreads(32,1,1)]
void main (uint3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        // calculate pixel position on canvas
        // was uint2 before, but negative values are possible due to padding and no prevention of that because it should not cause any more problems
        int2 canvas_pixel = id() + CalculationPosition;

        MappedInfo rakel_mapped_info = RakelMappedInfo[XY(id().x, id().y, CalculationSize.x)];
        emit(rakel_mapped_info.reservoir_pixel, uint2(ClipRadiusX, 1), rakel_mapped_info.distance, canvas_pixel);
    }
}