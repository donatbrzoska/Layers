#include "../ShaderBase/shader_base.hlsl"

#include "../Paint/paint.hlsl"
#include "../mapped_info.hlsl"
#include "../math.hlsl"
#include "../paint_grid.hlsl"

RWStructuredBuffer<ColumnInfo> RakelReservoirInfo;
RWStructuredBuffer<Paint> RakelReservoirContent;
RWStructuredBuffer<ColumnInfo> RakelReservoirInfoDuplicate;
RWStructuredBuffer<Paint> RakelReservoirContentDuplicate;
uint3 RakelReservoirSize;
float RakelReservoirCellVolume;

RWStructuredBuffer<MappedInfo> RakelMappedInfo;

int2 ReservoirPixelEmitRadius;

RWStructuredBuffer<ColumnInfo> RakelEmittedPaintInfo;
RWStructuredBuffer<Paint> RakelEmittedPaintContent;
uint3 RakelEmittedPaintSize;


// radius of 1 does an emit on a 3x3 area from emit source grid, based on the rounded rakel_reservoir_pixel
void emit(int2 radius, int2 canvas_pixel)
{
    MappedInfo rakel_mapped_info = RakelMappedInfo[XY(id().x, id().y, CalculationSize.x)];

    float target_volume_to_emit = rakel_mapped_info.target_volume_to_transfer;
    if (target_volume_to_emit > 0)
    {
        int2 rakel_reservoir_pixel_nearest = round(rakel_mapped_info.reservoir_pixel);
        
        int max_z = -1;
        int y, x;
        for (y=-radius.y; y<=radius.y; y++) {
            for (x=-radius.x; x<=radius.x; x++) {
                uint i = y + radius.y;
                uint j = x + radius.x;

                int2 coord = rakel_reservoir_pixel_nearest + int2(x, y);
                if (pixel_in_array_range(coord, RakelReservoirSize.xy)) { // Prevent out of bounds access to reservoir
                    uint2 coord_ = uint2(coord.x, coord.y);
                    int top_index = RakelReservoirInfoDuplicate[XY(coord_.x, coord_.y, RakelReservoirSize.x)].size - 1;
                    max_z = max(top_index, max_z);
                }
            }
        }

        int z = max_z;
        float target_volume_to_emit_left = target_volume_to_emit;
        while (target_volume_to_emit_left > 0 && z >= 0) {
            float max_volume_to_emit_from_this_layer = min(target_volume_to_emit_left, RakelReservoirCellVolume * rakel_mapped_info.total_overlap);

            // collect emitted paint for layer and delete it from reservoir
            Paint emitted_from_layer[9][9];
            float total_emitted_volume_from_layer = 0;
            for (y=-radius.y; y<=radius.y; y++) {
                for (x=-radius.x; x<=radius.x; x++) {
                    // initialize array
                    uint i = y + radius.y;
                    uint j = x + radius.x;
                    Paint p = paint_create_empty();
                    emitted_from_layer[i][j] = p;

                    int2 coord = rakel_reservoir_pixel_nearest + int2(x, y);
                    if (pixel_in_array_range(coord, RakelReservoirSize.xy)) { // Prevent out of bounds access to reservoir. Also, if it's not in range, this overlap part is not (and must not be!) used anyways.
                        float overlap = rakel_mapped_info.overlap[i][j];
                        if (overlap > 0) {
                            float max_volume_to_emit_from_this_voxel = overlap / rakel_mapped_info.total_overlap * max_volume_to_emit_from_this_layer;
                            // calculate volume to emit
                            uint3 coord_ = uint3(coord.x, coord.y, z);
                            // read from duplicate
                            Paint available = paint_grid_get(RakelReservoirInfoDuplicate, RakelReservoirContentDuplicate, RakelReservoirSize, coord_);
                            float available_volume_to_emit_from_this_voxel = overlap * available.volume;
                            float volume_to_emit_from_this_voxel = min(max_volume_to_emit_from_this_voxel, available_volume_to_emit_from_this_voxel);
                            Paint emitted_from_voxel = paint_create(available.color, volume_to_emit_from_this_voxel);

                            // keep track of emitted paint
                            emitted_from_layer[i][j] = emitted_from_voxel;
                            total_emitted_volume_from_layer += emitted_from_voxel.volume;

                            // delete from original
                            paint_grid_delete(RakelReservoirInfo, RakelReservoirContent, RakelReservoirSize, coord_, emitted_from_voxel.volume);
                        }
                    }
                }
            }
            target_volume_to_emit_left -= total_emitted_volume_from_layer;

            Paint emitted_from_layer_mixed = paint_create_empty();
            emitted_from_layer_mixed.volume = total_emitted_volume_from_layer;
            for (y=-radius.y; y<=radius.y; y++) {
                for (x=-radius.x; x<=radius.x; x++) {
                    uint i = y + radius.y;
                    uint j = x + radius.x;

                    float volume_part = emitted_from_layer[i][j].volume / unzero(total_emitted_volume_from_layer);
                    emitted_from_layer_mixed.color += volume_part * emitted_from_layer[i][j].color;
                }
            }

            // raw push
            paint_grid_push(RakelEmittedPaintInfo, RakelEmittedPaintContent, RakelEmittedPaintSize, canvas_pixel, emitted_from_layer_mixed);

            z--;
        }

        // update size, because we deleted some paint
        // doing it inside paint_grid_delete lead to bugs, so we do it here
        for (y=-radius.y; y<=radius.y; y++) {
            for (x=-radius.x; x<=radius.x; x++) {
                int2 coord = rakel_reservoir_pixel_nearest + int2(x, y);
                if (pixel_in_array_range(coord, RakelReservoirSize.xy)) { // Prevent out of bounds access to reservoir
                    uint2 coord_ = uint2(coord.x, coord.y);
                    paint_grid_update_size(RakelReservoirInfo, RakelReservoirContent, RakelReservoirSize, RakelReservoirCellVolume, coord_);
                }
            }
        }
    }
}

#pragma kernel main

[numthreads(32,1,1)]
void main (uint3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        // calculate pixel position on canvas
        // was uint2 before, but negative values are possible due to padding and no prevention of that because it should not cause any more problems
        int2 canvas_pixel = id() + CalculationPosition;

        emit(ReservoirPixelEmitRadius, canvas_pixel);
    }
}