#include "../ShaderBase/shader_base.hlsl"

// #include "../volume.hlsl"
#include "../Paint/paint.hlsl"
#include "../rakel.hlsl"
#include "../mapped_info.hlsl"
#include "../paint_grid.hlsl"

RWStructuredBuffer<Rakel> RakelInfo;
RWStructuredBuffer<ColumnInfo> RakelReservoirInfoDuplicate;
uint3 RakelReservoirSize;

float CanvasPositionZ;
RWStructuredBuffer<ColumnInfo> CanvasReservoirInfoDuplicate;
uint3 CanvasReservoirSize;
RWStructuredBuffer<MappedInfo> RakelMappedInfo;
uint2 RakelMappedInfoSize;

int2 ReservoirPixelEmitRadius;
float EmitDistance_MAX;
float EmitVolume_MIN;

// RWStructuredBuffer<float> DistortionMap;
// uint2 DistortionMapSize;
// uint DistortionMapIndex;


// radius of 1 does an emit on a 3x3 area from emit source grid, based on the rounded rakel_reservoir_pixel
float volume_to_emit_(int2 radius, int2 canvas_pixel)
{
    MappedInfo rakel_mapped_info = RakelMappedInfo[XY(canvas_pixel.x, canvas_pixel.y, RakelMappedInfoSize.x)];

    int2 rakel_reservoir_pixel_nearest = round(rakel_mapped_info.reservoir_pixel);

    float volume_rakel = 0; // how much volume (meaning height) is there above this reservoir pixel
    for (int y=-radius.y; y<=radius.y; y++) {
        for (int x=-radius.x; x<=radius.x; x++) {
            uint i = y + radius.y;
            uint j = x + radius.x;

            int2 coord = rakel_reservoir_pixel_nearest + int2(x, y);
            if (pixel_in_array_range(coord, RakelReservoirSize.xy)) { // Prevent out of bounds access to reservoir. Also, if it's not in range, this overlap part is not (and must not be!) used anyways.
                uint2 coord_ = uint2(coord.x, coord.y);
                // calculate overlap part, because summed overlap might be < 1
                // possible reason would be emitting up at rakel edge
                float overlap_part = rakel_mapped_info.overlap[i][j] / unzero(rakel_mapped_info.total_overlap);
                volume_rakel += overlap_part * RakelReservoirInfoDuplicate[XY(coord_.x, coord_.y, RakelReservoirSize.x)].volume;
            }
        }
    }
    float volume_canvas = CanvasReservoirInfoDuplicate[XY(canvas_pixel.x, canvas_pixel.y, CanvasReservoirSize.x)].volume;
    float paint_thickness_rakel = volume_rakel * VOLUME_THICKNESS();
    float paint_thickness_canvas = volume_canvas * VOLUME_THICKNESS();
    float surface_distance = rakel_mapped_info.distance - paint_thickness_rakel - paint_thickness_canvas;

    Rakel rakel = RakelInfo[0];

    float gravity_distance = sin(radians(rakel.tilt)) * EmitDistance_MAX;
    bool surfaces_touch = surface_distance <= gravity_distance;

    float volume_to_emit = 0;
    if (surfaces_touch)
    {
        // TODO adjust this, when implementing dried paint
        float rakel_edge_distance_from_canvas = abs(rakel.edge_z - CanvasPositionZ);
        float rakel_edge_distance_from_canvas_paint_surface = rakel_edge_distance_from_canvas - paint_thickness_canvas;
        float volume_fitting_between = max(rakel_edge_distance_from_canvas_paint_surface, 0) / VOLUME_THICKNESS();

        // multiply by total overlap, because we only want as much paint as there is for this reservoir pixel
        volume_to_emit = volume_fitting_between;
        if (volume_to_emit > 0)
        {
            volume_to_emit += EmitVolume_MIN;
        }
        volume_to_emit *= rakel_mapped_info.total_overlap;
        
        //TODO there might be problems with rounding to negative indizes
        // VOLUME_TO_EMIT_TARGET_PU *= DistortionMap[XY(rakel_reservoir_pixel_nearest.x + DistortionMapIndex, rakel_reservoir_pixel_nearest.y, DistortionMapSize.x)];

    }
    return volume_to_emit;
}

#pragma kernel main

[numthreads(32,1,1)]
void main (uint3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        // calculate pixel position on canvas
        // was uint2 before, but negative values are possible due to padding and no prevention of that because it should not cause any more problems
        int2 canvas_pixel = id() + CalculationPosition;
        RakelMappedInfo[XY(canvas_pixel.x, canvas_pixel.y, RakelMappedInfoSize.x)].target_volume_to_transfer = volume_to_emit_(ReservoirPixelEmitRadius, canvas_pixel);
    }
}