#pragma kernel main
// https://learn.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-intrinsic-functions
// https://learn.microsoft.com/en-us/windows/win32/direct3d11/direct3d-11-advanced-stages-cs-atomic-functions

RWStructuredBuffer<float3> Debug;

// Filter #1
uint2 CalculationSize;

// Filter #2
uint2 CalculationPosition;

uint2 TextureSize;
float3 CanvasPosition;
float2 CanvasSize;

float3 RakelAnchor;
float3 RakelPosition;
float RakelLength;
float RakelWidth;

float RakelRotation;

float2 RakelOriginBoundaries;

// Emitting
struct Paint {
    float4 color;
    int volume;
};
uint2 RakelReservoirSize;
uint2 RakelLowerLeftRounded;
RWStructuredBuffer<Paint> RakelApplicationReservoir;


RWTexture2D<float4> Texture;


uint IJ(uint i, uint j)
{
    return i * 2 + j;
}

uint XY(uint x, uint y, uint width)
{
    return y * width + x;
}

// // b is right from a
// float angle_between(float3 a, float3 b)
// {
//     return acos(dot(a,b)/(length(a)*length(b))); // TODO MAYBE THIS IS BUGGY BECAUSE OF RADS/DEGREES
// }

bool is_relevant_thread(uint3 id)
{
    return id.x < CalculationSize.x && id.y < CalculationSize.y;
}

float3 map_to_world_space(uint2 pixel, uint2 texture_size, float3 canvas_position, float2 canvas_size)
{
    float px = (float)pixel.x / (float)texture_size.x;
    float py = (float)pixel.y / (float)texture_size.y;

    float3 positive_canvas_aligned = float3(px*canvas_size.x, py*canvas_size.y, 0);

    float3 canvas_lower_left = canvas_position - float3(canvas_size.x/2, canvas_size.y/2, 0);
    float3 canvas_aligned = positive_canvas_aligned + canvas_lower_left;

    return canvas_aligned;
}

float3 rotate_by_z(float3 vec, float angle, float3 around)
{
    float3 vec_ = vec - around;

    float rad = radians(angle);
    float s = sin(rad);
    float c = cos(rad);
    float3 result = float3(
        vec_.x * c + vec_.y * s,
        vec_.y * c - vec_.x * s,
        vec_.z
    );
    return result + around;
}

bool pixel_is_under_rakel(uint2 pos_pixel)
{
    // translate pixel to world space
    float3 pos_world_space = map_to_world_space(pos_pixel, TextureSize, CanvasPosition, CanvasSize);

    // translate back so pixel is anchor aligned
    float3 back_translation_position = - (float3(RakelPosition.x, RakelPosition.y, 0) - RakelAnchor);
    float3 pos_back_translated_position = pos_world_space + back_translation_position;

    // rotate back around anchor
    float3 pos_back_rotated = rotate_by_z(pos_back_translated_position, - RakelRotation, RakelAnchor);

    // check boundaries
    if (pos_back_rotated.x <= RakelOriginBoundaries.x
        && pos_back_rotated.x >= 0
        && pos_back_rotated.y <= RakelOriginBoundaries.y
        && pos_back_rotated.y >= 0)
    {
        return true;
    }
    else
    {
        return false;
    }
}

int2 rotate_around_origin(int2 vec, float angle)
{
    // float2 vec_ = float2(float(vec.x), float(vec.y));
    float rad = radians(angle);
    float s = sin(rad);
    float c = cos(rad);
    int2 result = int2(
        vec.x * c + vec.y * s,
        vec.y * c - vec.x * s
    );
    return result;
}

int2 map_to_reservoir_pixel(uint2 canvas_pixel)
{
    // translate to origin
    int2 origin_aligned = canvas_pixel - RakelLowerLeftRounded;

    // rotate back
    int2 back_rotated = rotate_around_origin(origin_aligned, -RakelRotation);

    return back_rotated;
}

bool pixel_in_reservoir_range(uint2 pixel)
{
    return pixel.x >= 0
        && pixel.x < RakelReservoirSize.x
        && pixel.y >= 0
        && pixel.y < RakelReservoirSize.y;
}

[numthreads(1,8,1)]
void main (uint3 id : SV_DispatchThreadID)
{
    // Filter #1
    if (is_relevant_thread(id))
    {
        // calculate pixel position on canvas
        uint2 canvas_pixel = id.xy + CalculationPosition;
        // Filter #2
        if (pixel_is_under_rakel(canvas_pixel))
        {
            int2 reservoir_pixel = map_to_reservoir_pixel(canvas_pixel);
            if (pixel_in_reservoir_range(reservoir_pixel)) 
            {
                Paint reservoir_paint = RakelApplicationReservoir[XY(reservoir_pixel.x, reservoir_pixel.y, RakelReservoirSize.x)];
                // Paint reservoir_paint = RakelApplicationReservoir[XY(id.x, id.y, RakelReservoirSize.x)];
                if (reservoir_paint.volume > 0)
                {
                    Texture[canvas_pixel] = reservoir_paint.color;
                    // RakelApplicationReservoir[XY(reservoir_pixel.x, reservoir_pixel.y, RakelReservoirSize.x)].volume -= 1;
                    InterlockedAdd(RakelApplicationReservoir[XY(reservoir_pixel.x, reservoir_pixel.y, RakelReservoirSize.x)].volume, -1);
                }
            }
            // InterlockedAdd(Debug[XY(id.x, id.y, CalculationSize.x)].x, 0.4);
            // Debug[XY(id.x, id.y, CalculationSize.x)] = float3(, reservoir_pixel.y, 0);
        }
    }
}