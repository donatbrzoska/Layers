#pragma kernel main
// https://learn.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-intrinsic-functions
// https://learn.microsoft.com/en-us/windows/win32/direct3d11/direct3d-11-advanced-stages-cs-atomic-functions

// RWStructuredBuffer<float3> Debug;

// Filter #1
uint2 CalculationSize;

// Filter #2
uint2 CalculationPosition;

uint2 TextureSize;
float3 CanvasPosition;
float2 CanvasSize;

float3 RakelAnchor;
float3 RakelPosition;
float RakelLength;
float RakelWidth;

float RakelRotation;

float2 RakelOriginBoundaries;

// Emitting
struct Paint {
    float4 color;
    int volume;
};
uint2 RakelReservoirSize;
uint2 RakelLowerLeftRounded;
RWStructuredBuffer<Paint> RakelApplicationReservoir;


RWTexture2D<float4> Texture;


uint IJ(uint i, uint j)
{
    return i * 2 + j;
}

uint XY(uint x, uint y, uint width)
{
    return y * width + x;
}

uint XYZ(uint x, uint y, uint z, uint width, uint depth)
{
    return z * depth + y * width + x;
}

// // b is right from a
// float angle_between(float3 a, float3 b)
// {
//     return acos(dot(a,b)/(length(a)*length(b))); // TODO MAYBE THIS IS BUGGY BECAUSE OF RADS/DEGREES
// }

bool is_relevant_thread(uint3 id)
{
    return id.x < CalculationSize.x && id.y < CalculationSize.y;
}

float3 map_to_world_space(uint2 pixel, uint2 texture_size, float3 canvas_position, float2 canvas_size)
{
    float px = (float)pixel.x / (float)texture_size.x;
    float py = (float)pixel.y / (float)texture_size.y;

    float3 positive_canvas_aligned = float3(px*canvas_size.x, py*canvas_size.y, 0);

    float3 canvas_lower_left = canvas_position - float3(canvas_size.x/2, canvas_size.y/2, 0);
    float3 canvas_aligned = positive_canvas_aligned + canvas_lower_left;

    return canvas_aligned;
}

float3 rotate_by_z(float3 vec, float angle, float3 around)
{
    float3 vec_ = vec - around;

    float rad = radians(angle);
    float s = sin(rad);
    float c = cos(rad);
    float3 result = float3(
        vec_.x * c + vec_.y * s,
        vec_.y * c - vec_.x * s,
        vec_.z
    );
    return result + around;
}

bool pixel_is_under_rakel(uint2 pos_pixel)
{
    // translate pixel to world space
    float3 pos_world_space = map_to_world_space(pos_pixel, TextureSize, CanvasPosition, CanvasSize);

    // translate back so pixel is anchor aligned
    float3 back_translation_position = - (float3(RakelPosition.x, RakelPosition.y, 0) - RakelAnchor);
    float3 pos_back_translated_position = pos_world_space + back_translation_position;

    // rotate back around anchor
    float3 pos_back_rotated = rotate_by_z(pos_back_translated_position, - RakelRotation, RakelAnchor);

    // check boundaries
    if (pos_back_rotated.x <= RakelOriginBoundaries.x
        && pos_back_rotated.x >= 0
        && pos_back_rotated.y <= RakelOriginBoundaries.y
        && pos_back_rotated.y >= 0)
    {
        return true;
    }
    else
    {
        return false;
    }
}

float2 rotate_around_origin(int2 vec, float angle)
{
    float rad = radians(angle);
    float s = sin(rad);
    float c = cos(rad);
    float2 result = float2(
        vec.x * c + vec.y * s,
        vec.y * c - vec.x * s
    );
    return result;
}

float2 map_to_reservoir_pixel(uint2 canvas_pixel)
{
    // translate to origin
    int2 origin_aligned = canvas_pixel - RakelLowerLeftRounded;

    // rotate back
    float2 back_rotated = rotate_around_origin(origin_aligned, -RakelRotation);

    return back_rotated;
}

bool pixel_in_reservoir_range(float2 pixel)
{
    return pixel.x >= 0
        && pixel.x < (float)RakelReservoirSize.x
        && pixel.y >= 0
        && pixel.y < (float)RakelReservoirSize.y;
}

[numthreads(1,8,1)]
void main (uint3 id : SV_DispatchThreadID)
{
    // Filter #1
    if (is_relevant_thread(id))
    {
        // calculate pixel position on canvas
        uint2 canvas_pixel = id.xy + CalculationPosition;
        // Filter #2
        if (pixel_is_under_rakel(canvas_pixel))
        {
            float2 reservoir_pixel = map_to_reservoir_pixel(canvas_pixel);
            if (pixel_in_reservoir_range(reservoir_pixel))
            {
                // TODO behaviour at borders
                // calculate involved reservoir pixels
                uint2 coord_ul = uint2(floor(reservoir_pixel.x), ceil(reservoir_pixel.y));
                uint2 coord_ur = uint2(ceil(reservoir_pixel.x), ceil(reservoir_pixel.y));
                uint2 coord_ll = uint2(floor(reservoir_pixel.x), floor(reservoir_pixel.y));
                uint2 coord_lr = uint2(ceil(reservoir_pixel.x), floor(reservoir_pixel.y));

                // calculate parts for involved pixels
                // float ul_part = frac(reservoir_pixel.x) * (1-frac(reservoir_pixel.y));
                // float ur_part = (1-frac(reservoir_pixel.x)) * (1-frac(reservoir_pixel.y));
                // float ll_part = frac(reservoir_pixel.x) * frac(reservoir_pixel.y);
                // float lr_part = (1-frac(reservoir_pixel.x)) * frac(reservoir_pixel.y);
                float4 parts = float4(frac(reservoir_pixel.x),
                                      (1-frac(reservoir_pixel.x)),
                                      frac(reservoir_pixel.x),
                                      (1-frac(reservoir_pixel.x)))
                             * float4((1-frac(reservoir_pixel.y)),
                                      (1-frac(reservoir_pixel.y)),
                                      frac(reservoir_pixel.y),
                                      frac(reservoir_pixel.y));

                // interpolate
                // ... lookup at duplicate (z=1)
                Paint paint_ul = RakelApplicationReservoir[XYZ(coord_ul.x, coord_ul.y, 1, RakelReservoirSize.x, 2)];
                Paint paint_ur = RakelApplicationReservoir[XYZ(coord_ur.x, coord_ur.y, 1, RakelReservoirSize.x, 2)];
                Paint paint_ll = RakelApplicationReservoir[XYZ(coord_ll.x, coord_ll.y, 1, RakelReservoirSize.x, 2)];
                Paint paint_lr = RakelApplicationReservoir[XYZ(coord_lr.x, coord_lr.y, 1, RakelReservoirSize.x, 2)];
                // ... calculate volume and color
                // int volume = ul_part * (float)paint_ul.volume
                //            + ur_part * (float)paint_ur.volume
                //            + ll_part * (float)paint_ll.volume
                //            + lr_part * (float)paint_lr.volume;
                float4 volumes = float4(
                    paint_ul.volume,
                    paint_ur.volume,
                    paint_ll.volume,
                    paint_lr.volume
                );
                int volume = (int)dot(parts, volumes);
                // float4 color = ul_part * paint_ul.color
                //              + ur_part * paint_ur.color
                //              + ll_part * paint_ll.color
                //              + lr_part * paint_lr.color;
                float4 color = parts.x * paint_ul.color
                             + parts.y * paint_ur.color
                             + parts.z * paint_ll.color
                             + parts.w * paint_lr.color;
                // ... create paint
                Paint reservoir_paint;
                reservoir_paint.color = color;
                reservoir_paint.volume = volume;

                if (reservoir_paint.volume > 0)
                {
                    Texture[canvas_pixel] = reservoir_paint.color;
                    // delete amount of taken volume from reservoir
                    // 100 volume is one unit of paint, since it doesnt make sense to
                    // ... calculate parts of smaller integers and we have to use integers because of InterlockedAdd
                    // InterlockedAdd(RakelApplicationReservoir[XYZ(coord_ul.x, coord_ul.y, 0, RakelReservoirSize.x, 2)].volume, -((int)(100*ul_part)));
                    // InterlockedAdd(RakelApplicationReservoir[XYZ(coord_ur.x, coord_ur.y, 0, RakelReservoirSize.x, 2)].volume, -((int)(100*ur_part)));
                    // InterlockedAdd(RakelApplicationReservoir[XYZ(coord_ll.x, coord_ll.y, 0, RakelReservoirSize.x, 2)].volume, -((int)(100*ll_part)));
                    // InterlockedAdd(RakelApplicationReservoir[XYZ(coord_lr.x, coord_lr.y, 0, RakelReservoirSize.x, 2)].volume, -((int)(100*lr_part)));
                    InterlockedAdd(RakelApplicationReservoir[XYZ(coord_ul.x, coord_ul.y, 0, RakelReservoirSize.x, 2)].volume, -((int)(100*parts.x)));
                    InterlockedAdd(RakelApplicationReservoir[XYZ(coord_ur.x, coord_ur.y, 0, RakelReservoirSize.x, 2)].volume, -((int)(100*parts.y)));
                    InterlockedAdd(RakelApplicationReservoir[XYZ(coord_ll.x, coord_ll.y, 0, RakelReservoirSize.x, 2)].volume, -((int)(100*parts.z)));
                    InterlockedAdd(RakelApplicationReservoir[XYZ(coord_lr.x, coord_lr.y, 0, RakelReservoirSize.x, 2)].volume, -((int)(100*parts.w)));
                }
            }
            // Debug[XY(id.x, id.y, CalculationSize.x)] = float3(, reservoir_pixel.y, 0);
        }
    }
}