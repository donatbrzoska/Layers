// ######################################## SHADER BASE ########################################

#pragma kernel main

#include "basic_util.hlsl"
#include "index_util.hlsl"
#include "log_util.hlsl"

uint3 id;

uint2 CalculationSize;

RWStructuredBuffer<float4> Debug;
RWStructuredBuffer<int> DebugType;
// RWStructuredBuffer<int> Finished;

void set_debug_type(int t)
{
    DebugType[0] = t;
}

void log_(float4 f)
{
    Debug[XY(id.x, id.y, CalculationSize.x)] = f;
}

// ###################################### SHADER BASE END ######################################

#include "paint.hlsl"
#include "math_util.hlsl"
#include "bilinear_interpolation_util.hlsl"
#include "sutherland_hodgman.hlsl"

uint2 CalculationPosition;

uint2 TextureSize;
uint TextureResolution;
float3 CanvasPosition;
float2 CanvasSize;

float3 RakelAnchor;
float3 RakelPosition;
float RakelLength;
float RakelWidth;

float RakelRotation;

float3 RakelULTilted;
float3 RakelURTilted;
float3 RakelLLTilted;
float3 RakelLRTilted;

// Emitting
uint TransferMapMode;
float EmitVolume;

uint2 RakelReservoirSize;
uint RakelReservoirResolution;
// uint2 RakelLowerLeftRounded;
RWStructuredBuffer<Paint> RakelApplicationReservoir;
RWStructuredBuffer<Paint> RakelPickupReservoir;

RWStructuredBuffer<Paint> RakelEmittedPaint;


float3 map_to_world_space(int2 pixel, uint texture_resolution, float3 canvas_position, float2 canvas_size)
{
    float pixel_size = 1/float(texture_resolution);
    float3 positive_canvas_aligned = float3(0.5*pixel_size + pixel.x*pixel_size,
                                            0.5*pixel_size + pixel.y*pixel_size,
                                            0);

    float3 canvas_lower_left = canvas_position - float3(canvas_size.x/2, canvas_size.y/2, 0);
    float3 canvas_aligned = positive_canvas_aligned + canvas_lower_left;

    return canvas_aligned;
}

// returns:
// - x: part of dx of rakel, 0-err..1+err would mean pixel is under rakel
// - y: part of dy of rakel, 0-err..1+err would mean pixel is under rakel
// - z: distance from rakel: -inf .. +inf
float3 rakel_mapped(int2 pos_pixel)
{
    // translate pixel to world space
    float3 pos_world_space = map_to_world_space(pos_pixel, TextureResolution, CanvasPosition, CanvasSize);

    // translate back so pixel is anchor aligned
    float3 back_translation_position = - (float3(RakelPosition.x, RakelPosition.y, 0) - RakelAnchor);
    float3 pos_back_translated_position = pos_world_space + back_translation_position;

    // rotate back around anchor
    float3 pos_back_rotated = rotate_by_z(pos_back_translated_position, - RakelRotation, RakelAnchor);

    // calculate results
    float rakel_tilted_x_max = RakelLRTilted.x;
    float rakel_tilted_x_min = RakelLLTilted.x;
    float rakel_tilted_dx = rakel_tilted_x_max - rakel_tilted_x_min;
    float part_x = (pos_back_rotated.x - rakel_tilted_x_min) / rakel_tilted_dx;
    float part_y = pos_back_rotated.y / RakelLength; // currently easy, because there is no length tilt

    float m = (RakelLRTilted.y - RakelLLTilted.y) / (RakelLRTilted.x - RakelLLTilted.x);
    float c = RakelPosition.y - m * RakelPosition.x;
    float dist = m * pos_back_rotated.x + c;

    return float3(part_x, part_y, dist);
}

bool pixel_in_reservoir_range(int2 pixel)
{
    return pixel.x >= 0
        && pixel.x < (int)RakelReservoirSize.x
        && pixel.y >= 0
        && pixel.y < (int)RakelReservoirSize.y;
}

// radius of 1 does an emit on a 3x3 area from emit source grid, based on the rounded reservoir_pixel
void emit(float2 reservoir_pixel, int2 radius)
{
    int2 reservoir_pixel_nearest = round(reservoir_pixel);

    // TODO ratio of application and pickup reservoir
    int VOLUME_TO_EMIT_TARGET = EmitVolume * PAINT_UNIT();

    // array size should really be [1+2*radius.y][1+2*radius.x] but we can't make dynamic arrays
    // in HLSL. 9x9 should be enough though, since with 45Â° tilt we will probably use 6x6 and
    // more tilt probably won't emit anyways
    float4 color_to_emit_app[9][9];
    float4 color_to_emit_pu[9][9];
    float volume_to_emit_app[9][9];
    float volume_to_emit_pu[9][9];
    float4 result_color_app = float4(0,0,0,0);
    float4 result_color_pu = float4(0,0,0,0);
    float result_volume_app = 0;
    float result_volume_pu = 0;
    int y, x; // declare loop variables here so the compiler won't complain about double declaration of y
    for (y=-radius.y; y<=radius.y; y++) {
        for (x=-radius.x; x<=radius.x; x++) {
            // initialize array
            uint i = y + radius.y;
            uint j = x + radius.x;
            volume_to_emit_app[i][j] = 0;
            volume_to_emit_pu[i][j] = 0;

            // calculate part
            int2 coord = reservoir_pixel_nearest + int2(x, y);
            if (pixel_in_reservoir_range(coord)) { // Prevent out of bounds access to reservoir. Also, if it's not in range, this overlap part is not (and must not be!) used anyways.
                float overlap = 0;
                if (TransferMapMode == 0) { // nearest neighbour
                    overlap = 1;
                } else if (TransferMapMode == 1) { // bilinear interpolation
                    overlap = calculate_unrotated_overlap(coord, 1, reservoir_pixel, 1);
                } else if (TransferMapMode == 2) { // polygon clipping
                    overlap = calculate_exact_overlap(coord, reservoir_pixel, -RakelRotation);
                }

                if (overlap > 0) {
                    // get paint
                    uint2 coord_ = uint2(coord.x, coord.y);
                    Paint available_app = RakelApplicationReservoir[XYZ(coord_.x, coord_.y, 1, RakelReservoirSize)];
                    Paint available_pu = RakelPickupReservoir[XYZ(coord_.x, coord_.y, 1, RakelReservoirSize)];

                    // calculate volume
                    int target_volume = overlap * VOLUME_TO_EMIT_TARGET;
                    int really_available_volume_app = overlap * available_app.volume;
                    int really_available_volume_pu = overlap * available_pu.volume;
                    volume_to_emit_app[i][j] = min(target_volume, really_available_volume_app);
                    volume_to_emit_pu[i][j] = min(target_volume, really_available_volume_pu);
                    result_volume_app += volume_to_emit_app[i][j];
                    result_volume_pu += volume_to_emit_pu[i][j];

                    color_to_emit_app[i][j] = available_app.color;
                    color_to_emit_pu[i][j] = available_pu.color;
                }
            }
        }
    }

    // determine color based on emitted volumes
    // TODO use mix function
    for (y=-radius.y; y<=radius.y; y++) {
        for (x=-radius.x; x<=radius.x; x++) {
            int2 coord = reservoir_pixel_nearest + int2(x, y);
            if (pixel_in_reservoir_range(coord)) {
                uint i = y + radius.y;
                uint j = x + radius.x;
                float volume_part_app = volume_to_emit_app[i][j] / unzero(result_volume_app);
                float volume_part_pu = volume_to_emit_pu[i][j] / unzero(result_volume_pu);
                result_color_app += volume_part_app * color_to_emit_app[i][j];
                result_color_pu += volume_part_pu * color_to_emit_pu[i][j];
            }
        }
    }

    Paint result_paint_app;
    Paint result_paint_pu;
    result_paint_app.color = result_color_app;
    result_paint_pu.color = result_color_pu;
    result_paint_app.volume = result_volume_app;
    result_paint_pu.volume = result_volume_pu;

    Paint result_paint = mix(result_paint_app, result_paint_pu);

    // delete amount of taken volume from reservoir (z=0)
    int deleted = 0;
    for (y=-radius.y; y<=radius.y; y++) {
        for (x=-radius.x; x<=radius.x; x++) {
            int2 coord = reservoir_pixel_nearest + int2(x, y);
            if (pixel_in_reservoir_range(coord)) {
                uint i = y + radius.y;
                uint j = x + radius.x;
                int to_be_deleted_app = volume_to_emit_app[i][j];
                int to_be_deleted_pu = volume_to_emit_pu[i][j];

                uint2 coord_ = uint2(coord.x, coord.y);
                InterlockedAdd(RakelApplicationReservoir[XYZ(coord_.x, coord_.y, 0, RakelReservoirSize)].volume, -to_be_deleted_app);
                deleted += to_be_deleted_app;
                InterlockedAdd(RakelPickupReservoir[XYZ(coord_.x, coord_.y, 0, RakelReservoirSize)].volume, -to_be_deleted_pu);
            }
        }
    }

    RakelEmittedPaint[XY(id.x, id.y, CalculationSize.x)] = result_paint;
    // log_float(deleted);
}

void do_emit(float2 reservoir_pixel)
{
    if (TransferMapMode == 0) {
        emit(reservoir_pixel, uint2(0, 0));
    } else {
        emit(reservoir_pixel, uint2(1, 1));
    }
}

[numthreads(1,8,1)]
void main (uint3 id_ : SV_DispatchThreadID)
{
    id = id_;
    if (is_relevant_thread(id, CalculationSize))
    {
        // calculate pixel position on canvas
        // was uint2 before, but negative values are possible due to padding and no prevention of that because it should not cause any more problems
        int2 canvas_pixel = id.xy + CalculationPosition;
        float3 rakel_mapped_info = rakel_mapped(canvas_pixel);

        // NOTE: this calculation does not work for a curved rakel
        // rakel_mapped_info.x 0 means actually left from the pixel center, because the part_ info is about world space
        // reservoir_pixel is -0.5 for part_k == 0 and RakelReservoirSize.k - 1 + 0.5 for part_k == 1
        float2 reservoir_pixel = float2(rakel_mapped_info.x * RakelReservoirSize.x - 0.5,
                                        rakel_mapped_info.y * RakelReservoirSize.y - 0.5);
        
        do_emit(reservoir_pixel);
    }
    // if (id.x == 0 && id.y == 0)
    // {
    //     Finished[0] = 2;
    // }
}