// ######################################## SHADER BASE ########################################

#pragma kernel main

#include "basic_util.hlsl"
#include "index_util.hlsl"
#include "log_util.hlsl"

uint3 id;

uint2 CalculationSize;

RWStructuredBuffer<float4> Debug;
RWStructuredBuffer<int> DebugType;
// RWStructuredBuffer<int> Finished;

void set_debug_type(int t)
{
    DebugType[0] = t;
}

void log_(float4 f)
{
    Debug[XY(id.x, id.y, CalculationSize.x)] = f;
}

// ###################################### SHADER BASE END ######################################

#include "paint.hlsl"

uint SmoothingKernelSize;
int DiscardVolumeThreshhold;

RWStructuredBuffer<Paint> Reservoir;


[numthreads(1,8,1)]
void main (uint3 id_ : SV_DispatchThreadID)
{
    id = id_;
    if (is_relevant_thread(id, CalculationSize))
    {
        Paint available;
        if (SmoothingKernelSize > 1) {
            int radius = (SmoothingKernelSize-1)/2;

            int volume = 0;
            for (int i=-radius; i<=radius; i++) {
                for (int j=-radius; j<=radius; j++) {
                    // ... deal with oob access // TODO this generates volume at the borders, doesn't it?
                    uint x = clamp(id.x + i, 0, CalculationSize.x-1);
                    uint y = clamp(id.y + j, 0, CalculationSize.y-1);
                    volume += Reservoir[XYZ(x, y, 0, CalculationSize)].volume;
                }
            }
            // volume = volume * 0.04; // == /25
            volume = int(float(volume) / float(SmoothingKernelSize*SmoothingKernelSize));

            // Create and put smoothed volume to z=1
            available.color = Reservoir[XYZ(id.x, id.y, 0, CalculationSize)].color;
            available.volume = volume;
        } else {
            available = Reservoir[XYZ(id.x, id.y, 0, CalculationSize)];
        }

        // delete leftover volume due to integer rounding
        if (available.volume < DiscardVolumeThreshhold) {
            available.volume = 0;
        }
        
        Reservoir[XYZ(id.x, id.y, 1, CalculationSize)] = available;
        Reservoir[XYZ(id.x, id.y, 0, CalculationSize)] = available; // also update source for corrections
    }
    // if (id.x == 0 && id.y == 0)
    // {
    //     Finished[0] = 3;
    // }
}
