#pragma kernel main

// RWStructuredBuffer<float3> Debug;

// Filter #1
uint2 CalculationSize;

// Really emitting
uint2 CalculationPosition;

struct Paint {
    float4 color;
    int volume;
};
RWStructuredBuffer<Paint> RakelEmittedPaint;

RWStructuredBuffer<Paint> Canvas;
uint CanvasWidth;

// RWStructuredBuffer<int> Finished;


bool is_relevant_thread(uint3 id)
{
    return all(id.xy < CalculationSize);
}

uint XY(uint x, uint y, uint width)
{
    return y * width + x;
}

[numthreads(1,8,1)]
void main (uint3 id : SV_DispatchThreadID)
{
    // Filter #1
    if (is_relevant_thread(id))
    {
        // calculate pixel position on canvas
        uint2 canvas_pixel = id.xy + CalculationPosition;

        // get emitted paint
        // .. in this case CalculationSize == ReservoirSize
        Paint p = RakelEmittedPaint[XY(id.x, id.y, CalculationSize.x)];
        if (p.volume > 0)
        {
            // LATER: Implement layering here
            Canvas[XY(canvas_pixel.x, canvas_pixel.y, CanvasWidth)].volume += p.volume;

            // float4 canvas_color = Canvas[XY(canvas_pixel.x, canvas_pixel.y, CanvasWidth)].color;
            // Canvas[XY(canvas_pixel.x, canvas_pixel.y, CanvasWidth)].color = canvas_color * 2 + p.color / 2;
            Canvas[XY(canvas_pixel.x, canvas_pixel.y, CanvasWidth)].color = p.color;
        }
    }
    // if (id.x == 0 && id.y == 0)
    // {
    //     Finished[0] = 1;
    // }
}