// ######################################## SHADER BASE ########################################

#pragma kernel main

#include "basic_util.hlsl"
#include "index_util.hlsl"
#include "log_util.hlsl"

uint3 id;

uint2 CalculationSize;

RWStructuredBuffer<float4> Debug;
RWStructuredBuffer<int> DebugType;
// RWStructuredBuffer<int> Finished;

void set_debug_type(int t)
{
    DebugType[0] = t;
}

void log_(float4 f)
{
    Debug[XY(id.x, id.y, CalculationSize.x)] = f;
}

// ###################################### SHADER BASE END ######################################

#include "paint.hlsl"
#include "math_util.hlsl"
#include "bilinear_interpolation_util.hlsl"
#include "sutherland_hodgman.hlsl"

uint2 CalculationPosition;

uint RakelResolution;
float RakelRotation;
float3 RakelAnchor;
float3 RakelPosition;

float3 RakelULTilted;
float3 RakelURTilted;
float3 RakelLLTilted;
float3 RakelLRTilted;

float3 CanvasPosition;
float2 CanvasSize;
uint CanvasResolution;
uint2 CanvasReservoirSize;

// Emitting
uint TransferMapMode;

RWStructuredBuffer<Paint> CanvasReservoir;

RWStructuredBuffer<Paint> CanvasEmittedPaint;


float3 map_to_world_space(int2 pixel)
{
    float pixel_size = 1/float(RakelResolution);
    float3 positive_origin_aligned = float3(0.5*pixel_size + pixel.x*pixel_size,
                                            0.5*pixel_size + pixel.y*pixel_size,
                                            0);
    return positive_origin_aligned;
}

// returns:
// - x: part of dx of canvas, 0-err..1+err would mean pixel is over canvas
// - y: part of dy of canvas, 0-err..1+err would mean pixel is over canvas
// - z: distance from canvas: -inf .. +inf
float3 canvas_mapped(int2 pos_pixel)
{
    // convert pixel to world space
    float3 pos_world_space = map_to_world_space(pos_pixel);

    // TODO
    // float3 pos_tilted = rotate_by_

    // rotate around anchor
    float3 pos_rotated = rotate_by_z(pos_world_space, RakelRotation, RakelAnchor);

    // translate to actual rakel position
    float3 anchor_cleaned_translation = float3(RakelPosition.x, RakelPosition.y, 0) - RakelAnchor;
    float3 pos_translated = pos_rotated + anchor_cleaned_translation;

    // calculate results
    float canvas_x_max = CanvasPosition.x + CanvasSize.x / 2;
    float canvas_x_min = CanvasPosition.x - CanvasSize.x / 2;
    float canvas_dx = canvas_x_max - canvas_x_min;
    float part_x = (pos_translated.x - canvas_x_min) / canvas_dx;

    float canvas_y_max = CanvasPosition.y + CanvasSize.y / 2;
    float canvas_y_min = CanvasPosition.y - CanvasSize.y / 2;
    float canvas_dy = canvas_y_max - canvas_y_min;
    float part_y = (pos_translated.y - canvas_y_min) / canvas_dy;

    // TODO Rakel is now potentially rotated, so we need a 2D function for the distance
    // float m = (RakelLRTilted.y - RakelLLTilted.y) / (RakelLRTilted.x - RakelLLTilted.x);
    // float c = RakelPosition.y - m * RakelPosition.x;
    float dist = 0;//m * pos_back_rotated.x + c;

    return float3(part_x, part_y, dist);
}
bool pixel_in_reservoir_range(int2 pixel)
{
    return pixel.x >= 0
        && pixel.x < (int)CanvasReservoirSize.x
        && pixel.y >= 0
        && pixel.y < (int)CanvasReservoirSize.y;
}

// radius of 1 does an emit on a 3x3 area from emit source grid, based on the rounded reservoir_pixel
void emit(float2 reservoir_pixel, int2 radius)
{
    int2 reservoir_pixel_nearest = round(reservoir_pixel);

    int VOLUME_TO_EMIT_TARGET = PAINT_UNIT();

    // array size should really be [1+2*radius.y][1+2*radius.x] but we can't make dynamic arrays
    // in HLSL. 9x9 should be enough though, since with 45Â° tilt we will probably use 6x6 and
    // more tilt probably won't emit anyways
    float volume_to_emit[9][9];
    float part_sum = 0;
    float4 result_color = float4(0,0,0,0);
    float result_volume = 0;
    int x, y;
    for (y=-radius.y; y<=radius.y; y++) {
        for (x=-radius.x; x<=radius.x; x++) {
            // initialize array
            uint i = y + radius.y;
            uint j = x + radius.x;
            volume_to_emit[i][j] = 0;

            // calculate part
            int2 coord = reservoir_pixel_nearest + int2(x, y);
            if (pixel_in_reservoir_range(coord)) { // Prevent out of bounds access to reservoir. Also, if it's not in range, this overlap part is not (and must not be!) used anyways.
                float overlap = 0;
                if (TransferMapMode == 0) { // nearest neighbour
                    overlap = 1;
                } else if (TransferMapMode == 1) { // bilinear interpolation
                    overlap = calculate_unrotated_overlap(coord, 1, reservoir_pixel, 1);
                } else if (TransferMapMode == 2) { // polygon clipping
                    overlap = calculate_exact_overlap(coord, reservoir_pixel, RakelRotation);
                }
                
                if (overlap > 0) {
                    // get paint
                    uint2 coord_ = uint2(coord.x, coord.y);
                    Paint available = CanvasReservoir[XYZ(coord_.x, coord_.y, 1, CanvasReservoirSize)];

                    // The main reason for this check is, that we can't add overlap to part_sum
                    // if there is not even paint there as this would falsely darken the color
                    if (available.volume > 0) {
                        part_sum += overlap;

                        // calculate volume
                        int target_volume = overlap * VOLUME_TO_EMIT_TARGET;
                        int really_available_volume = overlap * available.volume;
                        volume_to_emit[i][j] = min(target_volume, really_available_volume);

                        result_volume += volume_to_emit[i][j];

                        // add up color
                        result_color += (overlap * available.color);
                    }
                }
            }
        }
    }

    // make sure to keep color brightness for border cases
    result_color /= unzero(part_sum); // prevent division by zero
    Paint result_paint;
    result_paint.color = result_color;
    result_paint.volume = result_volume;

    int deleted = 0;
    // delete amount of taken volume from reservoir (z=0)
    for (y=-radius.y; y<=radius.y; y++) {
        for (x=-radius.x; x<=radius.x; x++) {
            int2 coord = reservoir_pixel_nearest + int2(x, y);
            if (pixel_in_reservoir_range(coord)) {
                uint i = y + radius.y;
                uint j = x + radius.x;
                int to_be_deleted = volume_to_emit[i][j];

                uint2 coord_ = uint2(coord.x, coord.y);
                InterlockedAdd(CanvasReservoir[XYZ(coord_.x, coord_.y, 0, CanvasReservoirSize)].volume, -to_be_deleted);
                deleted += to_be_deleted;
            }
        }
    }

    CanvasEmittedPaint[XY(id.x, id.y, CalculationSize.x)] = result_paint;
    // log_float(deleted);
}

void do_emit(float2 reservoir_pixel)
{
    if (TransferMapMode == 0) {
        emit(reservoir_pixel, int2(0, 0));
    } else {
        emit(reservoir_pixel, int2(1, 1));
    }
}

[numthreads(1,8,1)]
void main(uint3 id_ : SV_DispatchThreadID)
{
    id = id_;
    if (is_relevant_thread(id, CalculationSize))
    {
        // calculate pixel position in reservoir
        // was uint2 before, but negative values are possible due to padding and no prevention of that because it should not cause any more problems
        int2 rakel_pixel = id.xy + CalculationPosition;
        float3 canvas_mapped_info = canvas_mapped(rakel_pixel);

        // canvas_mapped_info.x 0 means actually left from the pixel, because the part_ info is about world space
        // canvas_reservoir_pixel is -0.5 for part_k == 0 and CanvasReservoirSize.k - 1 + 0.5 for part_k == 1
        float2 canvas_reservoir_pixel = float2(canvas_mapped_info.x * CanvasReservoirSize.x - 0.5,
                                               canvas_mapped_info.y * CanvasReservoirSize.y - 0.5);
        
        do_emit(canvas_reservoir_pixel);
    }
    // if (id.x == 0 && id.y == 0)
    // {
    //     Finished[0] = 2;
    // }
}