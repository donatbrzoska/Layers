// ######################################## SHADER BASE ########################################

#pragma kernel main

#include "basic_util.hlsl"
#include "index_util.hlsl"
#include "log_util.hlsl"

uint3 id;

// Filter #1
uint2 CalculationSize;

RWStructuredBuffer<float4> Debug;
RWStructuredBuffer<int> DebugType;

void set_debug_type(int t)
{
    DebugType[0] = t;
}

void log_(float4 f)
{
    Debug[XY(id.x, id.y, CalculationSize.x)] = f;
}

// ###################################### SHADER BASE END ######################################

#include "math_util.hlsl"

uint2 CalculationPosition;

uint2 TextureSize;
float3 CanvasPosition;
float2 CanvasSize;

float3 RakelAnchor;
float3 RakelPosition;
float RakelLength;
float RakelWidth;

float RakelRotation;

float2 RakelOriginBoundaries;


RWTexture2D<float4> Texture;


float3 map_to_world_space(uint2 pixel, uint2 texture_size, float3 canvas_position, float2 canvas_size)
{
    float px = (float)pixel.x / (float)texture_size.x;
    float py = (float)pixel.y / (float)texture_size.y;

    float3 positive_canvas_aligned = float3(px*canvas_size.x, py*canvas_size.y, 0);

    float3 canvas_lower_left = canvas_position - float3(canvas_size.x/2, canvas_size.y/2, 0);
    float3 canvas_aligned = positive_canvas_aligned + canvas_lower_left;

    return canvas_aligned;
}

bool pixel_is_under_rakel(uint2 pos_pixel)
{
    // translate pixel to world space
    float3 pos_world_space = map_to_world_space(pos_pixel, TextureSize, CanvasPosition, CanvasSize);

    // translate back so pixel is anchor aligned
    float3 back_translation_position = - (float3(RakelPosition.x, RakelPosition.y, 0) - RakelAnchor);
    float3 pos_back_translated_position = pos_world_space + back_translation_position;

    // rotate back around anchor
    float3 pos_back_rotated = rotate_by_z(pos_back_translated_position, - RakelRotation, RakelAnchor);

    // check boundaries
    if (pos_back_rotated.x <= RakelOriginBoundaries.x
        && pos_back_rotated.x >= 0
        && pos_back_rotated.y <= RakelOriginBoundaries.y
        && pos_back_rotated.y >= 0) {
        return true;
    } else {
        return false;
    }
}

[numthreads(1,8,1)]
void main (uint3 id : SV_DispatchThreadID)
{
    // Filter #1
    if (is_relevant_thread(id, CalculationSize)) {
        // calculate pixel position on canvas
        uint2 pos_pixel = id.xy + uint2(CalculationPosition.x, CalculationPosition.y);

        // Filter #2
        if (pixel_is_under_rakel(pos_pixel)) {
            Texture[pos_pixel] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
        }
        // Debug[XY(id.x, id.y, CalculationSize.x)] = pos_back_rotated;//back_translation;
    }
}