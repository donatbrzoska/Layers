#pragma kernel main
// https://learn.microsoft.com/en-us/windows/win32/direct3dhlsl/dx-graphics-hlsl-intrinsic-functions

// RWStructuredBuffer<float3> Debug;

// Filter #1
uint2 CalculationSize;

// Filter #2
struct CanvasPixelMappingInfo_ {
    float3 CanvasPosition;
    float pad0;
    float3 RakelAnchor;
    float pad1;
    float3 RakelPosition;
    float pad2;
    uint2 CalculationPosition;
    uint2 TextureSize;
    float2 CanvasSize;
    float2 RakelOriginBoundaries;

    float RakelLength;
    float RakelWidth;

    float RakelRotation;

};
// struct CanvasPixelMappingInfo_ {
//     uint2 CalculationPosition;

//     uint2 TextureSize;
//     float3 CanvasPosition;
//     float2 CanvasSize;

//     float3 RakelAnchor;
//     float3 RakelPosition;
//     float RakelLength;
//     float RakelWidth;

//     float RakelRotation;

//     float2 RakelOriginBoundaries;
// };

StructuredBuffer<CanvasPixelMappingInfo_> CanvasPixelMappingInfoBuffer;
CanvasPixelMappingInfo_ CanvasPixelMappingInfo;

RWTexture2D<float4> Texture;

uint IJ(uint i, uint j)
{
    return i * 2 + j;
}

uint XY(uint x, uint y, uint width)
{
    return y * width + x;
}

// // b is right from a
// float angle_between(float3 a, float3 b)
// {
//     return acos(dot(a,b)/(length(a)*length(b))); // TODO MAYBE THIS IS BUGGY BECAUSE OF RADS/DEGREES
// }

bool is_relevant_thread(uint3 id)
{
    return id.x < CalculationSize.x && id.y < CalculationSize.y;
}

float3 map_to_world_space(uint2 pixel, uint2 texture_size, float3 canvas_position, float2 canvas_size)
{
    float px = (float)pixel.x / (float)texture_size.x;
    float py = (float)pixel.y / (float)texture_size.y;

    float3 positive_canvas_aligned = float3(px*canvas_size.x, py*canvas_size.y, 0);

    float3 canvas_lower_left = canvas_position - float3(canvas_size.x/2, canvas_size.y/2, 0);
    float3 canvas_aligned = positive_canvas_aligned + canvas_lower_left;

    return canvas_aligned;
}

float3 rotate_by_z(float3 vec, float angle, float3 around)
{
    float3 vec_ = vec - around;

    float rad = radians(angle);
    float s = sin(rad);
    float c = cos(rad);
    float3 result = float3(
        vec_.x * c + vec_.y * s,
        vec_.y * c - vec_.x * s,
        vec_.z
    );
    return result + around;
}

bool pixel_is_under_rakel(uint2 pos_pixel)
{
    // translate pixel to world space
    float3 pos_world_space = map_to_world_space(
        pos_pixel,
        CanvasPixelMappingInfo.TextureSize,
        CanvasPixelMappingInfo.CanvasPosition,
        CanvasPixelMappingInfo.CanvasSize
    );

    // translate back so pixel is anchor aligned
    float3 back_translation_position = - (float3(CanvasPixelMappingInfo.RakelPosition.x,
                                                 CanvasPixelMappingInfo.RakelPosition.y,
                                                 0)
                                          - CanvasPixelMappingInfo.RakelAnchor);
    float3 pos_back_translated_position = pos_world_space + back_translation_position;

    // rotate back around anchor
    float3 pos_back_rotated = rotate_by_z(
        pos_back_translated_position,
        - CanvasPixelMappingInfo.RakelRotation,
        CanvasPixelMappingInfo.RakelAnchor);

    // check boundaries
    if (pos_back_rotated.x <= CanvasPixelMappingInfo.RakelOriginBoundaries.x
        && pos_back_rotated.x >= 0
        && pos_back_rotated.y <= CanvasPixelMappingInfo.RakelOriginBoundaries.y
        && pos_back_rotated.y >= 0) {
        return true;
    } else {
        return false;
    }
}

[numthreads(1,8,1)]
void main (uint3 id : SV_DispatchThreadID)
{
    CanvasPixelMappingInfo = CanvasPixelMappingInfoBuffer[0];
    // Filter #1
    if (is_relevant_thread(id)) {
        // calculate pixel position on canvas
        uint2 pos_pixel = id.xy + uint2(CanvasPixelMappingInfo.CalculationPosition.x, CanvasPixelMappingInfo.CalculationPosition.y);

        // Filter #2
        if (pixel_is_under_rakel(pos_pixel)) {
            Texture[pos_pixel] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);
        }
        // Debug[XY(id.x, id.y, CalculationSize.x)] = pos_back_rotated;//back_translation;
    }
}
