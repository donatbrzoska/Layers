// ######################################## SHADER BASE ########################################

#include "basic_util.hlsl"
#include "indexing.hlsl"
#include "logging.hlsl"

uint3 id__;
uint2 SubgridGroupSize;
uint2 SubgridCurrentThreadID;

uint2 id()
{
    uint2 subgrid_id = uint2(id__.x, id__.y);
    return subgrid_id * SubgridGroupSize + SubgridCurrentThreadID;
}

int2 CalculationPosition;
uint2 CalculationSize;

RWStructuredBuffer<float4> Debug;
RWStructuredBuffer<DebugListInfo> DebugInfo;

void set_debug_list_info(uint size, uint t)
{
    DebugListInfo dli;
    dli.Size = size;
    dli.Type = t;
    DebugInfo[0] = dli;
}

void log_(uint index, float4 f)
{
    Debug[XYZ(id().x, id().y, index, CalculationSize)] = f;
}

// ###################################### SHADER BASE END ######################################

#include "paint.hlsl"


RWStructuredBuffer<Paint> Paint_A_B_Result;

#pragma kernel test_mix

[numthreads(32,1,1)]
void test_mix(uint3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        Paint test_mix_result = mix(Paint_A_B_Result[0], Paint_A_B_Result[1]);
        Paint_A_B_Result[2] = test_mix_result;
    }
}


RWStructuredBuffer<Paint> Paint_A_Result;
float4 BackgroundColor;

#pragma kernel test_alpha_blend

[numthreads(32,1,1)]
void test_alpha_blend(uint3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        Paint test_alpha_blend_result = alpha_blend(Paint_A_Result[0], BackgroundColor);
        Paint_A_Result[1] = test_alpha_blend_result;
    }
}


float4 RGBColor;

#pragma kernel test_rgb_to_ryb

[numthreads(32,1,1)]
void test_rgb_to_ryb(uint3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        float4 test_rgb_to_ryb_result = rgb_to_ryb(RGBColor);
        log_float4(test_rgb_to_ryb_result);
    }
}


float4 RYBColor;

#pragma kernel test_ryb_to_rgb

[numthreads(32,1,1)]
void test_ryb_to_rgb(uint3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        float4 test_ryb_to_rgb_result = ryb_to_rgb(RYBColor);
        log_float4(test_ryb_to_rgb_result);
    }
}
