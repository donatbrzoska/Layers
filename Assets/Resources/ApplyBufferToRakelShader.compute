// ######################################## SHADER BASE ########################################

#pragma kernel main

#include "basic_util.hlsl"
#include "index_util.hlsl"
#include "log_util.hlsl"

uint3 id;

uint2 CalculationSize;

RWStructuredBuffer<float4> Debug;
RWStructuredBuffer<DebugListInfo> DebugInfo;
// RWStructuredBuffer<int> Finished;

void set_debug_list_info(uint size, uint t)
{
    DebugListInfo dli;
    dli.Size = size;
    dli.Type = t;
    DebugInfo[0] = dli;
}

void log_(uint index, float4 f)
{
    Debug[XYZ(id.x, id.y, index, CalculationSize)] = f;
}

// ###################################### SHADER BASE END ######################################

#include "paint.hlsl"

int2 CalculationPosition;

RWStructuredBuffer<Paint> CanvasEmittedPaint;

RWStructuredBuffer<Paint> RakelPickupReservoir;
uint RakelReservoirWidth;


[numthreads(32,1,1)]
void main (uint3 id_ : SV_DispatchThreadID)
{
    id = id_;
    if (is_relevant_thread(id, CalculationSize))
    {
        // calculate pixel position on canvas
        int2 rakel_pixel = id.xy + CalculationPosition;

        Paint emitted = CanvasEmittedPaint[XY(id.x, id.y, CalculationSize.x)];
        Paint on_rakel = RakelPickupReservoir[XY(rakel_pixel.x, rakel_pixel.y, RakelReservoirWidth)];
        Paint mixed = mix(emitted, on_rakel);

        RakelPickupReservoir[XY(rakel_pixel.x, rakel_pixel.y, RakelReservoirWidth)] = mixed;
    }
    // if (id.x == 0 && id.y == 0)
    // {
    //     Finished[0] = 1;
    // }
}