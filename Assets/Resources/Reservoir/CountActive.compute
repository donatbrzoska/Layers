#include "../ShaderBase/shader_base.hlsl"

#include "../mapped_info.hlsl"

RWStructuredBuffer<MappedInfo> RakelMappedInfo;
uint2 RakelMappedInfoSize;
uint2 RakelReservoirSize;

RWStructuredBuffer<float> Workspace;
uint3 WorkspaceSize;

RWStructuredBuffer<int> ActiveCount;


#pragma kernel main

[numthreads(32,1,1)]
void main(uint3 id_ : SV_DispatchThreadID)
{
    set_subgrid_id(id_);
    if (is_relevant_thread(id(), CalculationSize)) {
        int2 pixel = id() + CalculationPosition;

        MappedInfo paint_source_mapped = RakelMappedInfo[XY(pixel.x, pixel.y, RakelMappedInfoSize.xy)];
        int2 reservoir_pixel_nearest = round(paint_source_mapped.reservoir_pixel);

        if (pixel_in_array_range(reservoir_pixel_nearest, RakelReservoirSize)) {
            float volume = Workspace[XY(pixel.x, pixel.y, WorkspaceSize.xy)];
            if (volume > 0) {
                InterlockedAdd(ActiveCount[0], 1);
            }
        }
    }
}
