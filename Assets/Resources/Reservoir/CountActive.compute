#include "../ShaderBase/shader_base.hlsl"

#include "../Paint/paint.hlsl"
#include "../mapped_info.hlsl"
#include "../paint_grid.hlsl"

RWStructuredBuffer<MappedInfo> PaintSourceMappedInfo;
uint2 PaintSourceReservoirSize;

RWStructuredBuffer<ColumnInfo> ReservoirInfo;
uint3 ReservoirSize;

RWStructuredBuffer<int> ActiveCount;


#pragma kernel main

[numthreads(32,1,1)]
void main (uint3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        MappedInfo paint_source_mapped = PaintSourceMappedInfo[XY(id().x, id().y, CalculationSize.x)];
        int2 reservoir_pixel_nearest = round(paint_source_mapped.reservoir_pixel);

        int2 pixel = id() + CalculationPosition;

        if (pixel_in_array_range(reservoir_pixel_nearest, PaintSourceReservoirSize)) {
            float volume = ReservoirInfo[XY(pixel.x, pixel.y, ReservoirSize.x)].volume;
            if (volume > 0) {
                InterlockedAdd(ActiveCount[0], 1);
            }
        }
    }
}
