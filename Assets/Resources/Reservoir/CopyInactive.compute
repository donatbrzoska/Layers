#include "../ShaderBase/shader_base.hlsl"

#include "../mapped_info.hlsl"
#include "../Paint/paint.hlsl"
#include "../paint_grid.hlsl"

RWStructuredBuffer<MappedInfo> RakelMappedInfo;
uint2 RakelMappedInfoSize;
int2 RakelMappedInfoActivePosition;
int2 RakelMappedInfoActiveSize;
int3 RakelReservoirSize;

RWStructuredBuffer<ColumnInfo> ReservoirInfo;
RWStructuredBuffer<Paint> ReservoirContent;
RWStructuredBuffer<ColumnInfo> ReservoirInfoDuplicate;
RWStructuredBuffer<Paint> ReservoirContentDuplicate;
uint3 ReservoirSize;


#pragma kernel main

[numthreads(32,1,1)]
void main (uint3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        int2 pixel = id() + CalculationPosition;

        if (pixel_in_array_range(pixel, ReservoirSize.xy))
        {
            bool do_copy = true;

            int2 rakel_mapped_info_max = RakelMappedInfoActivePosition + RakelMappedInfoActiveSize - int2(1,1);
            bool in_rakel_mapped_info_range =
                pixel.x >= RakelMappedInfoActivePosition.x && pixel.x <= rakel_mapped_info_max.x &&
                pixel.y >= RakelMappedInfoActivePosition.y && pixel.y <= rakel_mapped_info_max.y;
            if (in_rakel_mapped_info_range)
            {
                MappedInfo rakel_mapped_info = RakelMappedInfo[XY(pixel.x, pixel.y, RakelMappedInfoSize.x)];
                if (rakel_mapped_info.reservoir_pixel.x > -0.5 && rakel_mapped_info.reservoir_pixel.y > -0.5 &&
                    rakel_mapped_info.reservoir_pixel.x < RakelReservoirSize.x -0.5 && rakel_mapped_info.reservoir_pixel.y < RakelReservoirSize.y -0.5)
                {
                    do_copy = false;
                }
            }

            if (do_copy)
            {
                paint_grid_copy(
                    ReservoirInfo, ReservoirContent, ReservoirSize, pixel,
                    ReservoirInfoDuplicate, ReservoirContentDuplicate, ReservoirSize, pixel);
            }
        }
    }
}
