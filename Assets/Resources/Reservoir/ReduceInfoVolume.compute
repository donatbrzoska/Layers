#include "../ShaderBase/shader_base.hlsl"

#include "../Paint/paint.hlsl"
#include "../paint_grid.hlsl"

RWStructuredBuffer<ColumnInfo> ReservoirInfo;
uint3 ReservoirSize;

uint2 ReduceRegionSize;
uint ReduceFunction;


#pragma kernel reduce_volume

// assumes that index_base always has always smaller values than index
uint in_reduce_bounds(uint2 index, uint2 index_base)
{
    // casting to int2 and do abs(), because CalculationPosition may be negative
    return uint(all(abs(int2(index) - CalculationPosition) < int2(ReduceRegionSize)));
}

[numthreads(32,1,1)]
void reduce_volume(uint3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        uint2 upper = uint2(0, CalculationSize.y);
        uint2 right = uint2(CalculationSize.x, 0);

        uint2 i_base = CalculationPosition + id();
        uint2 i_ll = i_base;
        uint2 i_lr = i_base + right;
        uint2 i_ul = i_base + upper;
        uint2 i_ur = i_base + right + upper;

        float value_ll = ReservoirInfo[XY(i_ll.x, i_ll.y, ReservoirSize.x)].volume * in_reduce_bounds(i_ll, i_base);
        float value_lr = ReservoirInfo[XY(i_lr.x, i_lr.y, ReservoirSize.x)].volume * in_reduce_bounds(i_lr, i_base);
        float value_ul = ReservoirInfo[XY(i_ul.x, i_ul.y, ReservoirSize.x)].volume * in_reduce_bounds(i_ul, i_base);
        float value_ur = ReservoirInfo[XY(i_ur.x, i_ur.y, ReservoirSize.x)].volume * in_reduce_bounds(i_ur, i_base);

        float result = 0;
        if (ReduceFunction == 0) // max
        {
            result = max(max(max(value_ll, value_lr), value_ul), value_ur);
        }
        else if (ReduceFunction == 1) // add
        {
            result = value_ll + value_lr + value_ul + value_ur;
        }
        ReservoirInfo[XY(i_ll.x, i_ll.y, ReservoirSize.x)].volume = result;
    }
}