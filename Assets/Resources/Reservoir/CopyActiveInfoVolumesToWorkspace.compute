#include "../ShaderBase/shader_base.hlsl"

#include "../Paint/paint.hlsl"
#include "../mapped_info.hlsl"
#include "../paint_grid.hlsl"

RWStructuredBuffer<MappedInfo> RakelMappedInfo;
uint2 RakelMappedInfoSize;
uint2 RakelReservoirSize;

RWStructuredBuffer<ColumnInfo> ReservoirInfo;
RWStructuredBuffer<float> Workspace;
uint3 ReservoirSize;


#pragma kernel main

[numthreads(32,1,1)]
void main (uint3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        int2 pixel = id() + CalculationPosition;

        MappedInfo rakel_mapped_info = RakelMappedInfo[XY(pixel.x, pixel.y, RakelMappedInfoSize.x)];
        int2 reservoir_pixel_nearest = round(rakel_mapped_info.reservoir_pixel);

        ColumnInfo c;
        c.size = 0;
        c.write_index = 0;
        c.volume = 0;
        if (pixel_in_array_range(reservoir_pixel_nearest, RakelReservoirSize)) {
            c = ReservoirInfo[XY(pixel.x, pixel.y, ReservoirSize.x)];
        }

        Workspace[XY(pixel.x, pixel.y, ReservoirSize.x)] = c.volume;
    }
}
