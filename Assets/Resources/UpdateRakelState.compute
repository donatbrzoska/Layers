// ######################################## SHADER BASE ########################################

#include "basic_util.hlsl"
#include "indexing.hlsl"
#include "logging.hlsl"

uint3 id__;
uint2 SubgridGroupSize;
uint2 SubgridCurrentThreadID;

uint2 id()
{
    uint2 subgrid_id = uint2(id__.x, id__.y);
    return subgrid_id * SubgridGroupSize + SubgridCurrentThreadID;
}

int2 CalculationPosition;
uint2 CalculationSize;

RWStructuredBuffer<float4> Debug;
RWStructuredBuffer<DebugListInfo> DebugInfo;

void set_debug_list_info(uint size, uint t)
{
    DebugListInfo dli;
    dli.Size = size;
    dli.Type = t;
    DebugInfo[0] = dli;
}

void log_(uint index, float4 f)
{
    Debug[XYZ(id().x, id().y, index, CalculationSize)] = f;
}

// ###################################### SHADER BASE END ######################################

#include "rakel.hlsl"
#include "math.hlsl"

float3 Position;
float Pressure;
float Rotation;
float Tilt;
float MAX_SUPPORTED_TILT;
float SINK_BASE_MAX;
float SINK_TILT_MAX;

RWStructuredBuffer<Rakel> RakelInfo;


#pragma kernel main

[numthreads(32,1,1)]
void main (uint3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        Rakel rakel = RakelInfo[0];

        float sink = SINK_BASE_MAX + Tilt / MAX_SUPPORTED_TILT * SINK_TILT_MAX;
        Position.z += Pressure * sink;
        // prevent sink through canvas
        // TODO include canvas position -> this would also require info about the direction the canvas is oriented
        // TODO include anchor ratio, right now this only works for anchors located on rakel edge
        Position.z = min(Position.z, 0);

        rakel.position = Position;
        rakel.pressure = Pressure;
        rakel.rotation = Rotation;
        rakel.tilt = Tilt;

        float3 ul_origin = float3(0, rakel.length, 0);
        float3 ur_origin = float3(rakel.width, rakel.length, 0);
        float3 ll_origin = float3(0, 0, 0);
        float3 lr_origin = float3(rakel.width, 0, 0);

        rakel.ul_tilted = rotate_by_y(ul_origin, rakel.tilt, rakel.anchor); // tilt around anchor
        rakel.ur_tilted = rotate_by_y(ur_origin, rakel.tilt, rakel.anchor); // tilt around anchor
        rakel.ll_tilted = rotate_by_y(ll_origin, rakel.tilt, rakel.anchor); // tilt around anchor
        rakel.lr_tilted = rotate_by_y(lr_origin, rakel.tilt, rakel.anchor); // tilt around anchor

        float3 ul_rotated = rotate_by_z(rakel.ul_tilted, rakel.rotation, rakel.anchor); // rotate around anchor
        float3 ur_rotated = rotate_by_z(rakel.ur_tilted, rakel.rotation, rakel.anchor); // rotate around anchor
        float3 ll_rotated = rotate_by_z(rakel.ll_tilted, rakel.rotation, rakel.anchor); // rotate around anchor
        float3 lr_rotated = rotate_by_z(rakel.lr_tilted, rakel.rotation, rakel.anchor); // rotate around anchor

        float3 position_translation = rakel.position - rakel.anchor;
        rakel.upper_left = ul_rotated + position_translation;
        rakel.upper_right = ur_rotated + position_translation;
        rakel.lower_left = ll_rotated + position_translation;
        rakel.lower_right = lr_rotated + position_translation;

        rakel.edge_z = rakel.lower_left.z;

        RakelInfo[0] = rakel;
    }
}