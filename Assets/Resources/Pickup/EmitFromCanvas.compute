#include "../ShaderBase/shader_base.hlsl"

#include "../distance.hlsl"
#include "../convert.hlsl"
#include "../volume.hlsl"
#include "../Paint/paint.hlsl"
#include "../math.hlsl"
#include "../sutherland_hodgman.hlsl"
#include "../rakel.hlsl"
#include "../mapped_info.hlsl"

uint TextureResolution;

RWStructuredBuffer<Rakel> RakelInfo;
RWStructuredBuffer<Paint> RakelReservoirDuplicate;
uint2 RakelReservoirSize;
RWStructuredBuffer<MappedInfo> CanvasMappedInfo;

float3 CanvasPosition;
float2 CanvasSize;
RWStructuredBuffer<Paint> CanvasReservoir;
RWStructuredBuffer<Paint> CanvasReservoirDuplicate;
uint2 CanvasReservoirSize;

float RakelTilt_MAX;
float PickupDistance_MAX;
float PickupVolume_MIN;
float PickupVolume_MAX;

RWStructuredBuffer<Paint> CanvasEmittedPaint;


// radius of 1 does an emit on a 3x3 area from emit source grid, based on the rounded canvas_reservoir_pixel
void emit(float2 canvas_reservoir_pixel, int2 radius, float distance, int2 rakel_pixel)
{
    int2 canvas_reservoir_pixel_nearest = round(canvas_reservoir_pixel);

    // TODO For more detail, this (and the volume_to_pickup value) could also
    //      be calculated based on the polygon overlap
    float volume_rakel = RakelReservoirDuplicate[XY(rakel_pixel.x, rakel_pixel.y, RakelReservoirSize.x)].volume;
    float volume_canvas = CanvasReservoirDuplicate[XY(canvas_reservoir_pixel_nearest.x, canvas_reservoir_pixel_nearest.y, CanvasReservoirSize.x)].volume;
    float paint_thickness_rakel = volume_rakel * VOLUME_THICKNESS();
    float paint_thickness_canvas = volume_canvas * VOLUME_THICKNESS();
    float surface_distance = distance - paint_thickness_rakel - paint_thickness_canvas;
    bool surfaces_touch = surface_distance <= 0;

    if (surfaces_touch)
    {
        Rakel rakel = RakelInfo[0];
        // float VOLUME_TO_EMIT_TARGET = pickup_volume(
        //     distance,
        //     PickupDistance_MAX,
        //     RakelTilt,
        //     RakelTilt_MAX,
        //     PickupVolume_MIN * PAINT_UNIT(),
        //     PickupVolume_MAX * PAINT_UNIT());

        // This only really picks up paint when rakel edge is inside paint on canvas
        // Why surfaces_touch then?
        // - Paint is picked up only, when rakel is somehow touching canvas paint
        //   - through paint on rakel or
        //   - rakel surface
        // - Maybe the condition surfaces_touch is too realistic and not helpful, instead have certain pickup distance?
        // TODO adjust this, when implementing dried paint
        float rakel_edge_distance_from_canvas = abs(rakel.edge_z - CanvasPosition.z);
        float rakel_edge_distance_from_canvas_paint_surface = rakel_edge_distance_from_canvas - paint_thickness_canvas;
        float how_negative = abs(min(rakel_edge_distance_from_canvas_paint_surface, 0));
        float volume_too_much_on_canvas = how_negative / VOLUME_THICKNESS();
        float volume_to_pickup = volume_too_much_on_canvas;
        // only add min pickup value when rakel edge is really inside paint
        if (volume_to_pickup > 0)
        {
            volume_to_pickup += PickupVolume_MIN;
        }

        // array size should really be [1+2*radius.y][1+2*radius.x] but we can't make dynamic arrays
        // in HLSL. 9x9 should be enough though, since with 45Â° tilt we will probably use 6x6 and
        // more tilt probably won't emit anyways
        float4 color_to_emit[9][9];
        float volume_to_emit[9][9];
        float4 result_color = float4(0,0,0,0);
        float result_volume = 0;
        int x, y;
        for (y=-radius.y; y<=radius.y; y++) {
            for (x=-radius.x; x<=radius.x; x++) {
                // initialize arrays
                uint i = y + radius.y;
                uint j = x + radius.x;
                volume_to_emit[i][j] = 0;
                color_to_emit[i][j] = float4(0,0,0,0);

                // calculate part
                int2 coord = canvas_reservoir_pixel_nearest + int2(x, y);
                if (pixel_in_array_range(coord, CanvasReservoirSize)) { // Prevent out of bounds access to reservoir. Also, if it's not in range, this overlap part is not (and must not be!) used anyways.
                    Rectangle fragment_rectangle = create_rectangle(canvas_reservoir_pixel, rakel.rotation, rakel.tilt);
                    Rectangle reservoir_rectangle = create_rectangle(coord, 0, 0);
                    float overlap = calculate_exact_overlap(fragment_rectangle, reservoir_rectangle);

                    if (overlap > 0) {
                        // get paint
                        uint2 coord_ = uint2(coord.x, coord.y);
                        Paint available = CanvasReservoirDuplicate[XY(coord_.x, coord_.y, CanvasReservoirSize.x)];
                        // prevent complete pickup
                        float MIN_VOLUME_TO_STAY = 0.1;
                        // do max, in case there has never been any volume
                        available.volume = max(available.volume - MIN_VOLUME_TO_STAY, 0);

                        // calculate volume
                        float target_volume = overlap * volume_to_pickup;
                        float really_available_volume = overlap * available.volume;
                        volume_to_emit[i][j] = min(target_volume, really_available_volume);
                        result_volume += volume_to_emit[i][j];

                        color_to_emit[i][j] = available.color;
                    }
                }
            }
        }

        // determine color based on emitted volumes
        // TODO use mix function
        for (y=-radius.y; y<=radius.y; y++) {
            for (x=-radius.x; x<=radius.x; x++) {
                int2 coord = canvas_reservoir_pixel_nearest + int2(x, y);
                if (pixel_in_array_range(coord, CanvasReservoirSize)) {
                    uint i = y + radius.y;
                    uint j = x + radius.x;
                    float volume_part = volume_to_emit[i][j] / unzero(result_volume);
                    result_color += volume_part * color_to_emit[i][j];
                }
            }
        }

        Paint result_paint;
        result_paint.color = result_color;
        result_paint.volume = result_volume;

        float deleted = 0;
        // delete amount of taken volume from reservoir (z=0)
        for (y=-radius.y; y<=radius.y; y++) {
            for (x=-radius.x; x<=radius.x; x++) {
                int2 coord = canvas_reservoir_pixel_nearest + int2(x, y);
                if (pixel_in_array_range(coord, CanvasReservoirSize)) {
                    uint i = y + radius.y;
                    uint j = x + radius.x;
                    float to_be_deleted = volume_to_emit[i][j];

                    uint2 coord_ = uint2(coord.x, coord.y);
                    CanvasReservoir[XY(coord_.x, coord_.y, CanvasReservoirSize.x)].volume -= to_be_deleted;
                    deleted += to_be_deleted;
                }
            }
        }

        CanvasEmittedPaint[XY(id().x, id().y, CalculationSize.x)] = result_paint;
        // log_float(deleted);
    }
}

#pragma kernel main

[numthreads(32,1,1)]
void main(uint3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        // calculate pixel position in reservoir
        // was uint2 before, but negative values are possible due to padding and no prevention of that because it should not cause any more problems
        int2 rakel_pixel = id() + CalculationPosition;

        MappedInfo canvasMappedInfo = CanvasMappedInfo[XY(id().x, id().y, CalculationSize.x)];
        emit(canvasMappedInfo.reservoir_pixel, int2(1, 1), canvasMappedInfo.distance, rakel_pixel);
    }
}