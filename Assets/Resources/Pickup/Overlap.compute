#include "../ShaderBase/shader_base.hlsl"

#include "../math.hlsl"
#include "../sutherland_hodgman.hlsl"
#include "../rakel.hlsl"
#include "../mapped_info.hlsl"

RWStructuredBuffer<Rakel> RakelInfo;
int2 ReservoirPixelPickupRadius;
RWStructuredBuffer<MappedInfo> CanvasMappedInfo;

uint3 CanvasReservoirSize;

#pragma kernel main

[numthreads(32,1,1)]
void main(uint3 id_ : SV_DispatchThreadID)
{
    id__ = id_;
    if (is_relevant_thread(id(), CalculationSize))
    {
        MappedInfo canvasMappedInfo = CanvasMappedInfo[XY(id().x, id().y, CalculationSize.x)];
        Rakel rakel = RakelInfo[0];

        // radius of 1 does an emit on a 3x3 area from emit source grid, based on the rounded canvas_reservoir_pixel
        int2 radius = ReservoirPixelPickupRadius;

        int2 canvas_reservoir_pixel_nearest = round(canvasMappedInfo.reservoir_pixel);

        float total_overlap = 0;
        int x, y;
        for (y=-radius.y; y<=radius.y; y++) {
            for (x=-radius.x; x<=radius.x; x++) {
                // initialize arrays
                uint i = y + radius.y;
                uint j = x + radius.x;

                // calculate part
                int2 coord = canvas_reservoir_pixel_nearest + int2(x, y);
                if (pixel_in_array_range(coord, CanvasReservoirSize.xy)) { // Prevent out of bounds access to reservoir. Also, if it's not in range, this overlap part is not (and must not be!) used anyways.
                    Rectangle fragment_rectangle = create_rectangle(canvasMappedInfo.reservoir_pixel, rakel.rotation, rakel.tilt);
                    Rectangle reservoir_rectangle = create_rectangle(coord, 0, 0);

                    float overlap = calculate_exact_overlap(fragment_rectangle, reservoir_rectangle);
                    CanvasMappedInfo[XY(id().x, id().y, CalculationSize.x)].overlap[i][j] = overlap;
                    total_overlap += overlap;
                }
            }
        }
        CanvasMappedInfo[XY(id().x, id().y, CalculationSize.x)].total_overlap = total_overlap;
    }
}