#include "../ShaderBase/shader_base.hlsl"

#include "../convert.hlsl"
#include "../math.hlsl"
#include "../rakel.hlsl"
#include "../mapped_info.hlsl"

uint TextureResolution;

RWStructuredBuffer<Rakel> RakelInfo;

RWStructuredBuffer<MappedInfo> CanvasMappedInfo;
uint2 CanvasMappedInfoSize;


float3 transform_to_rakel_position(int2 pos_pixel)
{
    Rakel rakel = RakelInfo[0];

    // convert pixel to world space
    float3 pos_world_space = pixel_to_world_space(
        pos_pixel,
        TextureResolution,
        float3(rakel.width/2, rakel.length/2, 0),
        float2(rakel.width, rakel.length));

    // tilt and rotate around anchor
    float3 pos_tilted = rotate_by_y(pos_world_space, rakel.tilt, rakel.anchor);
    float3 pos_rotated = rotate_by_z(pos_tilted, rakel.rotation, rakel.anchor);

    // translate to actual rakel position
    float3 anchor_cleaned_translation = float3(rakel.position.x, rakel.position.y, 0) - rakel.anchor;
    float3 pos_translated = pos_rotated + anchor_cleaned_translation;

    return pos_translated;
}

#pragma kernel main

[numthreads(32,1,1)]
void main(uint3 id_ : SV_DispatchThreadID)
{
    set_subgrid_id(id_);
    if (is_relevant_thread(id(), CalculationSize)) {
        // calculate pixel position in reservoir
        // was uint2 before, but negative values are possible due to padding and no prevention of that because it should not cause any more problems
        int2 rakel_pixel = id() + CalculationPosition;
        CanvasMappedInfo[XY(rakel_pixel.x, rakel_pixel.y, CanvasMappedInfoSize.xy)].transformed_pixel = transform_to_rakel_position(rakel_pixel);
    }
}